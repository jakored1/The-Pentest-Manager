# Written By Jakored
# https://github.com/jakored1/
# Handles all backend functions


# Imports
from flask import Flask, request, send_file
from flask_cors import CORS
import db_manager
import global_params
import os
import run_module_commands
import psutil

# Global
app = Flask(__name__)
CORS(app)


@app.route('/sidebarContent', methods=['GET'])
def sidebar_content():
    return db_manager.get_sidebar_content()


@app.route('/createProject', methods=['POST'])
def create_project():
    return db_manager.create_project(request.json)


@app.route('/addHosts', methods=['POST'])
def add_host():
    return db_manager.add_host(request.json['hosts'], request.json['parent_project_key'])


@app.route('/projectManager', methods=['GET'])
def project_manager():
    return db_manager.get_project_info(request.args.get('host_key'))


@app.route('/updateHost', methods=['POST'])
def update_host():
    return db_manager.update_host(request.json)


@app.route('/deleteHost', methods=['POST'])
def delete_host():
    return db_manager.delete_host(request.json)


@app.route('/addHost', methods=['POST'])
def create_host():
    return db_manager.add_host(request.json['hosts'], request.json['parent_project_key'])


@app.route('/deleteProject', methods=['POST'])
def delete_project():
    return db_manager.delete_project(request.json)


@app.route('/moduleImage', methods=['GET'])
def get_module_image():
    try:
        module_key = request.args.get('image')
    except Exception as e:
        print(e)
        return "Could not find modules image"
    image = db_manager.get_module_image_path(module_key)
    if image == "Could not find modules image":
        return send_file(path_or_file=global_params.MISSING_IMAGE)
    return send_file(path_or_file=image)


@app.route('/loadModules', methods=['GET'])
def get_modules_list():
    return db_manager.get_modules_list()


@app.route('/moduleInfo', methods=['GET'])
def get_module_info():
    try:
        module_key = str(request.args.get('key'))
    except Exception as e:
        return "Could not find module matching that key"
    return db_manager.get_module_info(module_key)


@app.route('/updateModuleCommand', methods=['POST'])
def update_module_command():
    return db_manager.update_module_command(request.json)


@app.route('/deleteModuleCommand', methods=['POST'])
def delete_module_command():
    return db_manager.delete_module_command(request.json)


@app.route('/addModuleCommand', methods=['POST'])
def add_module_command():
    return db_manager.add_module_command(request.json)


@app.route('/commandDatatypes', methods=['GET'])
def get_command_datatypes():
    return db_manager.get_command_datatypes()


@app.route('/updateSettings', methods=['POST'])
def save_settings_changes():
    return db_manager.save_settings_changes(request.json)


@app.route('/factoryReset', methods=['GET'])
def factory_reset():
    """
    Deletes the pm.db and recreates it with default values
    :return: Success message if all went well
    """
    try:
        # Deleting the database
        os.remove(global_params.DB_PATH)
        # Making sure the files folder exists
        if os.path.isdir(global_params.FILES_PATH):
            # Deleting all the files the user uploaded
            for root, dirs, files in os.walk(global_params.FILES_PATH):
                for file in files:
                    os.remove(os.path.join(root, file))
            # After deleting all the files, remove remaining directories
            for root, dirs, files in os.walk(global_params.FILES_PATH):
                for directory in dirs:
                    os.rmdir(os.path.join(root, directory))
            # After deleting all the files and folders in the path
            # Delete the files folder itself
            os.rmdir(global_params.FILES_PATH)
        # Making sure the module commands folder exists
        if os.path.isdir(global_params.MODULE_COMMANDS_FOLDER):
            # Delete all files in the module commands folder
            for root, dirs, files in os.walk(global_params.MODULE_COMMANDS_FOLDER):
                for file in files:
                    os.remove(os.path.join(root, file))
            # Deleting the commands folder
            os.rmdir(global_params.MODULE_COMMANDS_FOLDER)
    except FileNotFoundError:
        return "Could not factory reset, try to manually delete the programs db (named pm.db) and deleting all files " \
               "in the 'files' folder"
    # Creating database with default values
    db_manager.create_db()
    print('[+] pm.db has been created with default values')
    return "success"


@app.route('/deleteFile', methods=['POST'])
def delete_file():
    return db_manager.delete_file(request.json)


@app.route('/editFile', methods=['POST'])
def edit_file():
    return db_manager.edit_file(request.json)


@app.route('/createFile', methods=['POST'])
def create_file():
    return db_manager.create_file(request.json)


@app.route('/uploadFiles', methods=['POST'])
def upload_files():
    files_list = request.files.getlist('uploadedFiles')
    project_key = request.args.get('project_key')
    return db_manager.upload_files(files_list, project_key)


@app.route('/deleteString', methods=['POST'])
def delete_string():
    return db_manager.delete_string(request.json)


@app.route('/addString', methods=['POST'])
def add_string():
    return db_manager.add_string(request.json)


@app.route('/updateString', methods=['POST'])
def update_string():
    return db_manager.update_string(request.json)


@app.route('/hostInfo', methods=['GET'])
def get_host_info():
    return db_manager.get_host_info(request.args.get('hostKey'))


@app.route('/updateHostNote', methods=['POST'])
def update_host_note():
    return db_manager.update_host_note(request.json)


@app.route('/deleteTerminal', methods=['POST'])
def delete_terminal():
    return db_manager.delete_terminal(request.json)


@app.route('/addTerminal', methods=['POST'])
def add_terminal():
    return db_manager.add_terminal(request.json['hostKey'])


@app.route('/settings', methods=['GET'])
def get_settings():
    return db_manager.get_settings()


@app.route('/availableDatatypes', methods=['GET'])
def get_available_datatypes():
    return db_manager.get_available_datatypes(request.args.get('hostKey'))


@app.route('/updateProjectNote', methods=['POST'])
def update_project_note():
    return db_manager.update_project_note(request.json)


@app.route('/updateAttackChain', methods=['POST'])
def get_attack_chain():
    return db_manager.update_attack_chain(request.json)


@app.route('/runCommand', methods=['POST'])
def run_command():
    return run_module_commands.run_command_main(request.json)


@app.route('/getCommandCurrentOutput', methods=['GET'])
def get_command_current_output():
    return run_module_commands.get_command_current_output(str(request.args.get('commandKey')))


@app.route('/stopCommand', methods=['POST'])
def stop_command():
    return run_module_commands.stop_command(str(request.json['commandKey']))


@app.route('/getCommandOutput', methods=['GET'])
def get_command_output():
    cmd_key = request.args.get('cmdKey')
    module_key = request.args.get('moduleKey')
    parent_key = request.args.get('parentKey')
    return db_manager.get_command_output(cmd_key, module_key, parent_key)


@app.route('/deleteCommand', methods=['POST'])
def delete_command():
    return db_manager.delete_command(request.json)


@app.route('/addCommand', methods=['POST'])
def add_command():
    return db_manager.add_command(request.json)


@app.route('/getUsage', methods=['GET'])
def get_usage():
    """Returns the current amount of cpu, memory and gpu being currently used"""
    cpu = str(psutil.cpu_percent()) + '%'
    memory = str(psutil.virtual_memory().percent) + '%'
    usage_dict = {'cpu': cpu, 'memory': memory}
    return usage_dict


@app.route('/getRunningCommandsAmount', methods=['GET'])
def get_current_running_commands_amount():
    """Gets the amount of running commands from run_module_commands and returns it"""
    return str(run_module_commands.get_current_commands_amount())


@app.route('/downloadFile', methods=['GET'])
def download_file():
    file_path, file_name = db_manager.download_file(request.args.get('datatypeKey'))
    return send_file(file_path, as_attachment=file_name)


@app.route('/downloadConfig', methods=['GET'])
def download_config():
    file_path = db_manager.download_config()

    def generate():
        with open(file_path) as f:
            yield from f
        os.remove(file_path)

    file_response = app.response_class(generate(), mimetype='text/json')
    file_response.headers.set('Content-Disposition', 'attachment', filename='pm_config.json')
    return file_response


@app.route('/uploadConfig', methods=['POST'])
def upload_config():
    config_file = request.files['file']
    return db_manager.upload_config(config_file)


if __name__ == '__main__':
    # Checking if the backend db exists, if not then create it
    if not os.path.isfile(global_params.DB_PATH):
        db_manager.create_db()  # Creating db and adding default data into it
        print('[+] pm.db has been created with default values')
    # If the project already exists
    else:
        # Make sure that all module_output_commands are set as finished_running
        # Because if the user just started the program, any commands that may have been running when the program was
        # closed have definitely stopped running
        db_manager.set_module_output_commands_finished_running()
        # Delete any temporary files that still might be in the module commands folder
        if os.path.isdir(global_params.MODULE_COMMANDS_FOLDER):
            for root, dirs, files in os.walk(global_params.MODULE_COMMANDS_FOLDER):
                for file in files:
                    os.remove(os.path.join(root, file))

    app.run(debug=False, host=global_params.BACKEND_IP, port=global_params.BACKEND_PORT)
