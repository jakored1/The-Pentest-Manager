import { useState, useEffect } from "react"
import { getSettingsURL, updateSettingsURL, factoryResetURL, themeColors } from '../../components/GlobalParams'
import axios from "axios"
import { Form, Input, Button, Space, Spin, Tooltip, notification, Popconfirm } from "antd"
import { QuestionCircleOutlined, DeleteOutlined, WarningFilled } from "@ant-design/icons"


function Settings({darkMode}) {

    const [doneLoading, setDoneLoading] = useState(false)
    const [buttonLoading, setButtonLoading] = useState(false)
    const [settings, setSettings] = useState({})
    const whitespaceRegex = /^\S+$/
    const RequiredNoWhitespaceRule = [
        {
            required: true,
            whitespace: true,
            message: 'this field cannot be left empty'
        },
        {
            pattern: whitespaceRegex,
            message: 'no whitespace allowed in datatype string'
        }
    ]

    const handleFactoryReset = () => {
        setButtonLoading(true)
        axios.get(factoryResetURL)
        .then((res) => {
            if (res.data === 'success') {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
                window.location.reload();
            } else {
                console.log(res.data)
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'ran into error while attempting factory reset',
                placement: 'bottomRight'
            })
        })
        setButtonLoading(false)
    }

    const submitSettingsChanges = (values) => {
        setButtonLoading(true)
        axios.post(updateSettingsURL, values)
        .then((res) => {
            if (res.data === 'settings updated') {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
            } else {
                console.log(res.data)
                notification.warning({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'could not save settings',
                placement: 'bottomRight'
            })
        })
        setButtonLoading(false)
    }

    useEffect(() => {
        axios.get(getSettingsURL)
            .then((res) => {
                setSettings(res.data)
                setDoneLoading(true)
            })
            .catch((err) => {
                console.log(err)
                notification.error({
                    message: 'Error',
                    description: 'Ran into an error while fetching settings',
                    placement: 'bottomRight'
                })
            })
        // eslint-disable-next-line
    }, [])


    return (
        <div>
            <h2
                style={{ color: darkMode ? themeColors['text']['dark'] : themeColors['text']['light'] }}
            >Settings:</h2>
            {
                doneLoading
                // If we got all the info needed
                ?   <div>
                        <Form
                            onFinish={submitSettingsChanges}
                            scrollToFirstError
                            // layout="vertical"
                            style={{
                                maxWidth: '600px'
                            }}
                            autoComplete="off"
                            initialValues={{
                                "hostDatatype": settings.Datatypes.Host.stringRepresentation,
                                "fileDatatype": settings.Datatypes.File.stringRepresentation,
                                "stringDatatype": settings.Datatypes.String.stringRepresentation,
                                "shell": settings.Shell,
                                "shellWorkingDirectory": settings.ShellWorkingDirectory,
                                "encoding": settings.Encoding
                            }}
                        >
                            {/* DATATYPE SETTINGS */}
                            <div style={{ display: 'flex', flexDirection: 'row', marginTop: '25px', alignItems: 'center' }}>
                                <h3 style={{ marginRight: '7px' }} >Data Types</h3>
                                <Tooltip 
                                    title="Add datatype strings to your commands for quick and easy command execution"
                                >
                                    <QuestionCircleOutlined />
                                </Tooltip>
                            </div>
                            <Form.Item 
                                required
                                name="hostDatatype"
                                label={settings.Datatypes.Host.name + ':'}
                                tooltip={<>{settings.Datatypes.Host.description}</>}
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="<HOST> or {HOST}"
                                />
                            </Form.Item>

                            <Form.Item 
                                required
                                name="fileDatatype"
                                label={settings.Datatypes.File.name + ':'}
                                tooltip={<>{settings.Datatypes.File.description}</>}
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="<FILE> or {FILE}"
                                />
                            </Form.Item>

                            <Form.Item 
                                required
                                name="stringDatatype"
                                label={settings.Datatypes.String.name + ':'}
                                tooltip={<>{settings.Datatypes.String.description}</>}
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="<STRING> or {STRING}"
                                />
                            </Form.Item>

                            {/* SHELL SETTINGS */}
                            <div style={{ display: 'flex', flexDirection: 'row', marginTop: '25px', alignItems: 'center' }}>
                                <h3 style={{ marginRight: '7px' }} >Shell / Terminal</h3>
                                <Tooltip 
                                    title="Settings that help define the behaviour of the shell when running module commands"
                                >
                                    <QuestionCircleOutlined />
                                </Tooltip>
                            </div>
                            <Form.Item 
                                required
                                name="shell"
                                label='Shell'
                                tooltip={<>The shell that runs every command</>}
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="/bin/bash"
                                />
                            </Form.Item>
                            <Form.Item 
                                required
                                name="shellWorkingDirectory"
                                label='Working Directory'
                                tooltip={<>The directory in which every module command will run</>}
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="Examples: /home/username or /tmp"
                                />
                            </Form.Item>

                            {/* ENCODING SETTINGS */}
                            <div style={{ display: 'flex', flexDirection: 'row', marginTop: '25px', alignItems: 'center' }}>
                                <h3 style={{ marginRight: '7px' }} >Encoding</h3>
                                <Tooltip 
                                    title={<>Which encoding to use when writing and reading from files. <br />
                                            UTF-8 should be acceptable in most cases. <br />
                                            If you need to read from a file with specific encoding, 
                                            change the setting here to the appropiate enconding and try again. <br /><br />
                                            <b>Beware!</b><br/>
                                            This also writes files in the given encoding, 
                                            so make sure you don't write/create files with an encoding you only meant to use for reading certain files
                                            </>}
                                >
                                    <QuestionCircleOutlined />
                                </Tooltip>
                            </div>
                            <Form.Item 
                                required
                                name="encoding"
                                label='Encoding'
                                rules={RequiredNoWhitespaceRule}
                                style={{ marginTop: '-8px' }}
                            >
                                <Input 
                                    placeholder="UTF-8"
                                />
                            </Form.Item>

                            <Form.Item style={{ marginTop: '35px' }}>
                                <Button type="primary" htmlType="submit" loading={buttonLoading} style={{ width: '100%', height: '50px' }}>
                                    <b>Save Changes</b>
                                </Button>
                            </Form.Item>
                        </Form>
                    </div>
                // If we couldn't get the settings for some reason
                : <div>
                    <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                        <Spin size="large" tip="Fetching settings..." />
                    </Space>
                </div>
            }
            <div>
            <Popconfirm 
                title="This action will reset ALL data. Are you sure?" 
                icon={<WarningFilled />} 
                onConfirm={() => handleFactoryReset()}
            >
                <Button icon={<DeleteOutlined />} danger type="primary" loading={buttonLoading}>
                    Factory Reset
                </Button>
            </Popconfirm>
            </div>
        </div>
    )
}

export default Settings;
