import { Avatar, Button, Card, Form, Input, Modal, Space, Spin, notification } from "antd";
import axios from "axios";
import { useEffect, useState } from "react";
import { addCommandURL, loadModulesURL } from "../../../components/GlobalParams";
import Meta from "antd/es/card/Meta";
import { LeftOutlined, SaveOutlined } from "@ant-design/icons";


function UploadCommandOutputModal({openUploadModuleModal, setOpenUploadModuleModal, hostKey, getHostInfo}) {

    const [modulesList, setModulesList] = useState([])
    const [selectedModuleName, setSelectedModuleName] = useState('')
    const [selectedModuleKey, setSelectedModuleKey] = useState('')
    const [doneLoading, setDoneLoading] = useState(false)
    const [searchInput, setSearchInput] = useState('')
    const [filteredResults, setFilteredResults] = useState([])
    const [loading, setLoading] = useState(false)
    const [form] = Form.useForm()

    useEffect(() => {
        if (openUploadModuleModal === true) {
            setDoneLoading(false)
            axios.get(loadModulesURL)
            .then((response) => {
                setModulesList(response.data)
                setDoneLoading(true)
                if (response.data.length < 1) {
                    notification.error({
                        message: 'Error',
                        description: 'Could not fetch modules',
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err);
                notification.error({
                    message: 'Error',
                    description: 'Could not fetch modules',
                    placement: 'bottomRight'
                })
            });
        }
        // eslint-disable-next-line
    }, [openUploadModuleModal])

    useEffect(() => { // Using use effect to change value of filtered items properly when searchInput changes
        if (searchInput !== '') {
            const filteredData = modulesList.filter((module) => {
                return module.name.toLowerCase().includes(searchInput.toLowerCase())
            })
            setFilteredResults(filteredData)
        } else {
            setFilteredResults(modulesList)
        }
        // eslint-disable-next-line
    }, [searchInput])

    const ModuleObject = ({module}) => {
        return (
            <div style={{ width: '25%' }}>
                <Card
                    style={{
                        marginRight: '20px',
                        marginBottom: '20px',
                        textAlign: 'center',
                        verticalAlign: 'middle'
                    }}
                    hoverable
                    bordered={true}
                    onClick={() => {
                            setSelectedModuleName(module.name);
                            setSelectedModuleKey(module.key);
                        }}
                >
                    <Meta
                        avatar={<Avatar src={module.icon} size={50} />}
                        title={module.name}
                        description={module.description}
                    />
                </Card>
            </div>
        )
    }

    const uploadCommandOutput = (values) => {
        values.moduleKey = selectedModuleKey
        values.parentKey = hostKey
        console.log(values)
        setLoading(true)
        axios.post(addCommandURL, values)
        .then((res) => {
            if (res.data === 'command added') {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
                getHostInfo()
                setLoading(false)
                setOpenUploadModuleModal(false)
            } else {
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error adding command',
                placement: 'bottomRight'
            })
        })
        setLoading(false)
    }

    return(
        <div>
            <Modal
                open={openUploadModuleModal}
                okText="Run Command"
                cancelText="Back"
                onOk={() => setOpenUploadModuleModal(false)}
                onCancel={() => {
                    setOpenUploadModuleModal(false)
                    setSelectedModuleKey('')
                }}
                width={'76%'}
                footer={null}
            >
                { doneLoading ?  // If we got project info from backend
                    selectedModuleKey === '' ?  // If user didn't select module yet
                    <div>
                        <h1>Select Module</h1>
                        <Input
                            style={{
                                width: '500px',
                                marginBottom: '20px'
                            }}
                            placeholder="Find Module"
                            onChange={(e) => setSearchInput(e.target.value)}
                        />
                        <br />
                        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
                            {
                                searchInput.length > 0 ? (
                                    filteredResults.map((module) => {
                                        return (
                                            <ModuleObject module={module} key={module.key} />
                                        )
                                    })
                                ) : (
                                    modulesList.map((module) => {
                                        return (
                                            <ModuleObject module={module} key={module.key} />
                                        )
                                    })
                                )
                            }
                        </div>
                    </div>
                    :
                    <div>
                        <Form
                            layout='vertical'
                            autoComplete="off"
                            onFinish={uploadCommandOutput}
                            initialValues={{ 
                                content: '',
                                command: '',
                                commandTitle: ''
                            }}
                            form={form}
                        >
                            <h1>{'Enter "' + selectedModuleName + '" Output:'}</h1>
                            <Form.Item
                                label="Command Title"
                                tooltip="You can give this command a name if you want"
                                name="commandTitle"
                                requiredMark="optional"
                            >
                                <Input placeholder="command 1" />
                            </Form.Item>
                            <Form.Item
                                required
                                label="Executed Command"
                                tooltip="The command that gave you the output you are entering"
                                name="command"
                                rules={[{
                                    required: true,
                                    whitespace: true,
                                    message: 'please let me know what command you executed'
                                }]}
                            >
                                <Input placeholder="The command you executed" />
                            </Form.Item>
                            <Form.Item
                                required 
                                label="Command Output"
                                tooltip="The output of the executed command"
                                name="content"
                                rules={[{
                                    required: true,
                                    whitespace: true,
                                    message: 'so the output of your command is such a secret eh?'
                                }]}
                            >
                                <Input.TextArea
                                    showCount
                                    onKeyDown={(event) => {  // Saving if user pressed Ctrl+S
                                        let charCode = String.fromCharCode(event.which).toLowerCase()  // Checking what key was pressed
                                        if((event.ctrlKey || event.metaKey) && charCode === 's') {  // Checking if ctrl+s was pressed
                                            event.preventDefault();  // Don't open a prompt to save the html page
                                            form.submit()
                                        }
                                    }}
                                    placeholder={"The output of your " + selectedModuleName + " command"}
                                    rows={10}
                                />
                            </Form.Item>
                            <Form.Item>
                                <div style={{ position: 'relative' }} >
                                    <span style={{ position: 'absolute', right: '0px', top: '0px' }}>
                                        <Button
                                            disabled={loading}
                                            icon={<LeftOutlined />}
                                            style={{ width: '100px' }}
                                            onClick={() => setSelectedModuleKey('')}
                                        >
                                            Back
                                        </Button>
                                        <Button
                                            style={{ marginLeft: '10px' }}
                                            icon={<SaveOutlined style={{ color: 'blue' }} />} 
                                            htmlType='submit'
                                            loading={loading}
                                        >
                                            Save
                                        </Button>
                                    </span>
                                </div>
                            </Form.Item>
                        </Form>
                    </div>
                :
                <div>
                    <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                        <Spin size="large" tip="Loading..." />
                    </Space>
                </div>
                }
            </Modal>
        </div>
    )
}

export default UploadCommandOutputModal;
