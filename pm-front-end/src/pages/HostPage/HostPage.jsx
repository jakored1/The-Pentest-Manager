import { useEffect, useState } from "react";
import { getHostInfoURL, deleteHostURL } from '../../components/GlobalParams'
import axios from "axios";
import { Button, Descriptions, Popconfirm, Space, Spin, Tag, notification } from "antd";
import HostsNotes from "./HostNotes";
import { DeleteOutlined } from "@ant-design/icons";
import HostModuleCommands from "./HostModuleCommands";
import selectRandomColor from "../../functions/selectRandomColor";
import HostAttackChain from "./HostAttackChain";
// import HostTerminal from "./HostTerminal";


function HostPage({selectedMenuItem, updateSidebarTabs, setSelectedMenuItem}) {
    
    const [hostInfo, setHostInfo] = useState({})
    const [doneLoading, setDoneLoading] = useState(false)

    const getHostInfo = () => {
        setDoneLoading(false)
        axios.get(getHostInfoURL+selectedMenuItem)
        .then((res) => {
            if (res.data === 'The requested host does not exist') {  // If something went wrong
                console.log(res.data)
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            } else {  // If all went well
                setHostInfo(res.data)
                setDoneLoading(true)
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Could not fetch host info',
                placement: 'bottomRight'
            })
        })
    }

    const handleDeleteHost = () => {
        axios.post(deleteHostURL, {key: hostInfo.key})
        .then((res) => {
            // Checking if the result was success or not
            if (res.data === "Host deleted") { // If host was updated successfully
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
                updateSidebarTabs() // Updating the sidebar tabs
                setSelectedMenuItem(selectedMenuItem.slice(0, -3)+'001') // Setting selected page to the project manager page
            } else { // If something went wrong
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
                updateSidebarTabs() // Updating the sidebar tabs just in case
            }
        })
        .catch((err) => {
            console.log(err);
            notification.error({
                message: 'Error',
                description: 'Ran into an error while deleting host',
                placement: 'bottomRight'
            })
            updateSidebarTabs() // Updating the sidebar tabs just in case
        });
    }

    useEffect(() => {  // Getting all the hosts info on page load
        getHostInfo()
        // eslint-disable-next-line
    }, [selectedMenuItem])
    
    return (
        <div>
            {
                doneLoading
                ?  // If we got project info from backend
            <div>
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBottom: '15px' }}>
                    <h1 style={{ marginTop: '-8px', marginBottom: '-5px', fontSize: 25 }}>{hostInfo.name}</h1>
                    <Popconfirm 
                        title="Are you sure you want to delete this host?" 
                        onConfirm={() => handleDeleteHost()}
                        okText="Delete"
                    >
                        <Button 
                            style={{ marginLeft: 'auto', marginTop: '-2px' }} 
                            icon={<DeleteOutlined />} 
                            danger 
                            type='primary'
                        />
                    </Popconfirm>
                </div>
                <Descriptions>
                    <Descriptions.Item label='Identifiers' >
                        {hostInfo.identifiers.map((identifier, key) => {
                            return (<Tag style={{ height: '100%' }} color={selectRandomColor()} key={key} >{identifier}</Tag>)
                        })}
                    </Descriptions.Item>
                    <Descriptions.Item label='Creation Time' >{hostInfo.creationTime}</Descriptions.Item>
                </Descriptions>
                <HostsNotes
                    noteContent={hostInfo.note}
                    hostKey={hostInfo.key}
                />
                {/* I decided not to implement a terminal via the webbrowser, the cost reward ratio wasn't worth it. Instead I made the pmcli */}
                {/* <HostTerminal
                    hostKey={hostInfo.key}
                    terminalInfo={hostInfo.terminals}
                    setHostInfo={setHostInfo}
                /> */}
                <HostAttackChain
                    attackChainContent={hostInfo.attack_chain}
                    projectKey={hostInfo.key}
                />
                <HostModuleCommands
                    hostKey={hostInfo.key}
                    modulesList={hostInfo.modules}
                    getHostInfo={getHostInfo}
                    setHostInfo={setHostInfo}
                    hostInfo={hostInfo}
                />
            </div>
            :  // If we didn't get backend info yet
            <div>
                <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                    <Spin size="large" tip="Fetching host info..." />
                </Space>
            </div>
            }
        </div>
    )
}

export default HostPage;