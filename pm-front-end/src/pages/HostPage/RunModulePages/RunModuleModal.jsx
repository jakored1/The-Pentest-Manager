import { Modal, Space, Spin, notification } from "antd";
import { useEffect, useState } from "react";
import { loadModulesURL, getModuleInfoURL } from "../../../components/GlobalParams";
import axios from "axios";
import SelectModule from "./SelectModule";
import SelectModuleCommand from "./SelectModuleCommand";


function RunModuleModal({openRunModuleModal, setOpenRunModuleModal, hostKey, getHostInfo}) {

    const [modulesList, setModulesList] = useState([])
    const [moduleInfo, setModuleInfo] = useState('')
    const [selectedModuleName, setSelectedModuleName] = useState('')
    const [selectedModuleKey, setSelectedModuleKey] = useState('')
    const [doneLoading, setDoneLoading] = useState(false)

    useEffect(() => {
        if (openRunModuleModal === true) {
            setDoneLoading(false)
            axios.get(loadModulesURL)
            .then((response) => {
                setModulesList(response.data)
                setDoneLoading(true)
                if (response.data.length < 1) {
                    notification.error({
                        message: 'Error',
                        description: 'Could not fetch modules',
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err);
                notification.error({
                    message: 'Error',
                    description: 'Could not fetch modules',
                    placement: 'bottomRight'
                })
            });
        }
        // eslint-disable-next-line
    }, [openRunModuleModal])

    useEffect(() => {
        if (selectedModuleKey !== '') {
            setDoneLoading(false)
            axios.get(getModuleInfoURL+selectedModuleKey)
            .then((res) => {
                setModuleInfo(res.data)
                if (res.data === "Could not find module matching that key") {
                    notification.error({
                        message: 'Error',
                        description: 'Could not fetch module info',
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err);
                notification.error({
                    message: 'Error',
                    description: 'Could not fetch module info',
                    placement: 'bottomRight'
                })
            });
            setDoneLoading(true)
        } else {
            setModuleInfo('')
        }
    }, [selectedModuleKey])

    return (
        <div>
            <Modal
                open={openRunModuleModal}
                okText="Run Command"
                cancelText="Back"
                onOk={() => setOpenRunModuleModal(false)}
                onCancel={() => {
                    setOpenRunModuleModal(false)
                    setSelectedModuleKey('')
                }}
                width={'76%'}
                footer={null}
            >
                { doneLoading ?  // If we got project info from backend
                    selectedModuleKey === '' ?  // If user didn't select module yet
                    <SelectModule 
                        setSelectedModuleName={setSelectedModuleName} 
                        setSelectedModuleKey={setSelectedModuleKey}
                        modulesList={modulesList}
                    />
                    :
                    <SelectModuleCommand
                        selectedModuleName={selectedModuleName}
                        setSelectedModuleKey={setSelectedModuleKey}
                        moduleInfo={moduleInfo}
                        hostKey={hostKey}
                        setOpenRunModuleModal={setOpenRunModuleModal}
                        getHostInfo={getHostInfo}
                    />
                :
                <div>
                    <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                        <Spin size="large" tip="Loading..." />
                    </Space>
                </div>
                }
            </Modal>
        </div>
    )
}

export default RunModuleModal;
