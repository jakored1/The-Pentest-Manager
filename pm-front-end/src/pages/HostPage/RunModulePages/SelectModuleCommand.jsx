import { Avatar, Button, Card, Dropdown, Form, Input, Space, Table, Tooltip, notification } from "antd";
import axios from "axios";
import React, { useEffect, useState } from 'react';
import { getDatatypesURL, getAvailableDatatypes, moduleIconURL, runModuleCommandURL } from "../../../components/GlobalParams";
import reactStringReplace from 'react-string-replace';
import { InfoCircleOutlined, LeftOutlined, PlayCircleOutlined, SelectOutlined } from "@ant-design/icons";
import addToModuleCommand from '../../../functions/addToModuleCommands'


function SelectModuleCommand({selectedModuleName, setSelectedModuleKey, moduleInfo, hostKey, setOpenRunModuleModal, getHostInfo}) {
    
    const [moduleCommands, setModuleCommands] = useState([])
    const [manageReplacements, setManageReplacements] = useState({})
    const [datatypesStringRepresentation, setDatatypesStringRepresentation] = useState({})
    const [availableDatatypes, setAvailableDatatypes] = useState({})
    const [loading, setLoading] = useState(false)
    const [commandError, setCommandError] = useState(false)
    const [commandErrorText, setCommandErrorText] = useState(null)
    const [finalCommand, setFinalCommand] = useState('# pick a command!')
    const colors = {'Host': 'darkgoldenrod', 'File': '#4169e1', 'String': '#9932cc'}
    const addToCommandForNiceOutput = addToModuleCommand(moduleInfo.key)
    const [form] = Form.useForm()
    const defaultColumns = [
        {
            title: <span>Command <Tooltip title='Hover your mouse over the datatypes in the command to change them!'><InfoCircleOutlined /></Tooltip></span>,
            dataIndex: "command",
            width: '45%',
            editable: true,
            render: (command, record) => {
                let newCommand = command 
                let spanKeys = 0
                Object.keys(datatypesStringRepresentation).map((key) => {
                    let dropdownIndex = 0
                    newCommand = reactStringReplace(newCommand, datatypesStringRepresentation[key], (match) => {
                        let items = getItems(dropdownIndex, record)[key]
                        dropdownIndex = dropdownIndex + 1
                        spanKeys = spanKeys + 1
                        return (
                            <span key={spanKeys}>
                                <Dropdown menu={{ items, selectable: true }} placement="bottom" disabled={loading} >
                                    <a onClick={(e) => e.preventDefault()} style={{ color: colors[key] }} href="/">
                                        <Space>
                                            {
                                                manageReplacements[record['key']] !== undefined ?
                                                match : manageReplacements[record['key']][key][dropdownIndex]['value']
                                            }
                                        </Space>
                                    </a>
                                </Dropdown>
                            </span>
                        )

                    })
                    return newCommand
                })
                return (
                    <div>{newCommand}</div>
                )
            }
        },
        {
            title: "Command Description",
            dataIndex: "description",
            width: '35%',
        },
        {
            title: "Run Command",
            dataIndex: "run_command",
            width: '15%',
            render: (_, record) => {
                return (
                    <Button
                        icon={<SelectOutlined style={{ color: 'blue' }} />}
                        onClick={() => datatypeSelected(record, null, null, null)}
                        disabled={loading}
                    >
                        Select command
                    </Button>
                )
            }
        },
    ]

    const getItems = (dropdownIndex, commandDetails) => {
        const newAvailableDatatypes = {}
        Object.entries(availableDatatypes).map(([datatype, valuesList]) => {
            newAvailableDatatypes[datatype] = []
            valuesList.forEach((value, index) => {
                newAvailableDatatypes[datatype].push({
                    key: index,
                    label: (
                        <div onClick={() => {datatypeSelected(commandDetails, value, datatype, dropdownIndex)}}>{value}</div>
                    )
                })
            })
            return null
        })
        return newAvailableDatatypes
    }

    const datatypeSelected = (commandDetails, selectedDatatypeValue, selectedDatatypeType, dropdownIndex) => {
        setCommandError(false)
        setCommandErrorText(null)

        // If the command doesn't have any datatypes in it
        if (JSON.stringify(manageReplacements[commandDetails.key]) === '{"File":{"0":{}},"String":{"0":{}},"Host":{"0":{}}}') {
            setFinalCommand(commandDetails.command)
            form.setFieldsValue({command: commandDetails.command})
            return
        }

        let oldFinalCommand = ''
        let newFinalCommand = commandDetails.command

        // If user only wants to display the command
        if (selectedDatatypeValue === null && selectedDatatypeType === null && dropdownIndex === null) {
            for (let i=0; i < Object.keys(datatypesStringRepresentation).length; i++) {
                let datatypeType = Object.keys(datatypesStringRepresentation)[i]
                let commandArray = newFinalCommand.split(datatypesStringRepresentation[datatypeType])
                for (let j=0; j < commandArray.length; j++) {
                    oldFinalCommand = oldFinalCommand + commandArray[j]
                    if (Object.keys(manageReplacements[commandDetails.key][datatypeType]).includes(j.toString())) {
                        if (manageReplacements[commandDetails.key][datatypeType][j.toString()]['value'] !== undefined)
                            oldFinalCommand = oldFinalCommand + manageReplacements[commandDetails.key][datatypeType][j.toString()]['value']
                    }    
                }
                newFinalCommand = oldFinalCommand
                oldFinalCommand = ''
            }
            setFinalCommand(newFinalCommand)
            form.setFieldsValue({command: newFinalCommand})
            return
        }

        const newManageReplacements = manageReplacements
        newManageReplacements[commandDetails.key][selectedDatatypeType][dropdownIndex]['value'] = selectedDatatypeValue
        setManageReplacements(newManageReplacements)

        for (let i=0; i < Object.keys(datatypesStringRepresentation).length; i++) {
            let datatypeType = Object.keys(datatypesStringRepresentation)[i]
            let commandArray = newFinalCommand.split(datatypesStringRepresentation[datatypeType])
            for (let j=0; j < commandArray.length; j++) {
                oldFinalCommand = oldFinalCommand + commandArray[j]
                if (Object.keys(newManageReplacements[commandDetails.key][datatypeType]).includes(j.toString())) {
                    if (newManageReplacements[commandDetails.key][datatypeType][j.toString()]['value'] !== undefined)
                        oldFinalCommand = oldFinalCommand + newManageReplacements[commandDetails.key][datatypeType][j.toString()]['value']
                }
            }
            newFinalCommand = oldFinalCommand
            oldFinalCommand = ''
        }
        setFinalCommand(newFinalCommand)
        form.setFieldsValue({command: newFinalCommand})
    }

    const runCommand = (formCommand) => {
        let command = formCommand.command
        let commandTitle = formCommand.commandTitle
        // If the user didn't change the default command
        if (command === '# pick a command!') {
            setCommandError(true)
            setCommandErrorText(<p style={{ color: 'red' }}>please select a command by changing it's value in the dropdown menu</p>)
            return null
        }
        // If one of the datatype string representations is in the string
        if (command.includes(datatypesStringRepresentation['Host']) === true || 
        command.includes(datatypesStringRepresentation['String']) === true || 
        command.includes(datatypesStringRepresentation['File']) === true) {
            setCommandError(true)
            setCommandErrorText(<p style={{ color: 'red' }}>
                you still have a datatype string in your command!<br />
                please select a value for all available datatypes in the command
            </p>)
            return null
        }
        // If the command is an empty or contains only whitespace
        if(command.length > 0 && command.replace(/\s/g, '').length === 0) {
            setCommandError(true)
            setCommandErrorText(<p style={{ color: 'red' }}>
                command cannot be empty
            </p>)
            return null
        }

        setLoading(true)
        axios.post(runModuleCommandURL, {
            commandTitle: commandTitle,
            command: command,
            parentKey: hostKey,
            moduleKey: moduleInfo.key
        })
        .then((res) => {
            if (res.data.result === "running command") {
                // Waiting X seconds so the backend can add the command to the db before we request host info again
                setTimeout(function(){ 
                    notification.success({
                        message: 'Success',
                        description: res.data.result,
                        placement: 'bottomRight'
                    })
                    // Getting updated host info with new module commands
                    getHostInfo()
                    setLoading(false)
                    setOpenRunModuleModal(false)
                }, 1000)
            } else {
                console.log(res.data)
                notification.error({
                    message: 'Error',
                    description: 'could not run module command',
                    placement: 'bottomRight'
                })
                setLoading(false)
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'could not run module command',
                placement: 'bottomRight'
            })
            setLoading(false)
        })
    }

    useEffect(() => {  // Set module commands every time a new module is selected
        if (moduleInfo !== '') {
            setModuleCommands(moduleInfo.commands)

            // Getting datatypes 
            axios.get(getDatatypesURL)
            .then((res) => {
                const newDatatypeValues = {}
                newDatatypeValues.File = res.data.File.stringRepresentation
                newDatatypeValues.String = res.data.String.stringRepresentation
                newDatatypeValues.Host = res.data.Host.stringRepresentation
                setDatatypesStringRepresentation(newDatatypeValues)
                const newManageReplacements = {}
                moduleInfo.commands.forEach((command) => {
                    newManageReplacements[command.key] = {}
                    for (let i=0; i < 3; i++) {
                        let pos = 0
                        let dropdownIndex = 0
                        let currentDatatypeType = newDatatypeValues[Object.keys(newDatatypeValues)[i.toString()]]
                        newManageReplacements[command.key][Object.keys(newDatatypeValues)[i.toString()]] = {}
                        newManageReplacements[command.key][Object.keys(newDatatypeValues)[i.toString()]][dropdownIndex] = {}
                        while (command.command.indexOf(currentDatatypeType, pos) !== -1) {
                            let index = command.command.indexOf(currentDatatypeType, pos)
                            newManageReplacements[command.key][Object.keys(newDatatypeValues)[i.toString()]][dropdownIndex] = {
                                'type': Object.keys(newDatatypeValues)[i.toString()],
                                'index': index,
                                'value': currentDatatypeType
                            }
                            dropdownIndex = dropdownIndex + 1
                            pos = command.command.indexOf(currentDatatypeType, pos) + 1
                        }
                    }
                })
                setManageReplacements(newManageReplacements)
            })
            .catch((err) => {
                console.log(err)
            })
        }
    }, [moduleInfo])

    useEffect(() => {
        // Every time a new module is selected,
        // replace all it's datatype strings with dropdown selections to replace the datatype string representaion
        if ("File" in datatypesStringRepresentation && "Host" in datatypesStringRepresentation && "String" in datatypesStringRepresentation) {
            // Getting available datatypes
            axios.get(getAvailableDatatypes+hostKey)
            .then((res) => {
                // Editting content to make it ready to be items for an antd dropdown
                setAvailableDatatypes(res.data)
            })
            .catch((err) => {
                console.log(err)
            })
        }
        // eslint-disable-next-line
    }, [datatypesStringRepresentation])

    return (
        <div >
            
            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                <h2>{'Select ' + selectedModuleName + ' Command'}</h2>
                <Avatar
                    src={moduleIconURL+moduleInfo.key}
                    size={50}
                    style={{ marginLeft: '15px' }}
                />
            </div>

            <div style={{ display: 'flex', flexDirection: 'row', marginTop: '-10px', alignItems: 'center' }}>
                <InfoCircleOutlined />
                <p style={{ marginLeft: '10px' }}>
                    {moduleInfo.description}
                </p>
            </div>
            
            {
                addToCommandForNiceOutput === '' ?
                <div style={{ marginBottom: '15px' }}></div> : 
                <p style={{ marginTop: '0px', marginBottom: '25px' }}>
                    {addToCommandForNiceOutput}
                </p>
            }
            
            <Table
                bordered
                dataSource={moduleCommands}
                columns={defaultColumns}
                size='middle'
                pagination={false}
            />
            <br />
            <Card title="Selected Command Details:" >
                <Form
                    form={form}
                    layout='vertical'
                    autoComplete="off"
                    onFinish={runCommand}
                    initialValues={{
                        command: finalCommand,
                        commandTitle: ''
                    }}
                >
                    <Form.Item 
                        label="Command Title:"
                        name="commandTitle"
                        tooltip="A name to represent the command you are running, for easier recognition later. This can be left empty"
                        requiredMark="optional"
                    >
                        <Input placeholder="command title" disabled={loading} />
                    </Form.Item>
                    <Form.Item
                        name="command" 
                        label="Command:"
                        tooltip="The command that is going to run!"
                    >
                        <Input
                            disabled={loading}
                            onChange={(e) => setFinalCommand(e.target.value)}
                            onKeyDown={() => {
                                setCommandError(false)
                                setCommandErrorText(null)
                            }}
                        />
                    </Form.Item>
                    <Form.Item>
                        <Button
                            icon={<PlayCircleOutlined style={{ color: '#3cb371' }} />}
                            htmlType="submit"
                            loading={loading}
                            danger={commandError}
                            // style={{ marginLeft: '30px' }}
                        >
                            Run command
                        </Button>
                    </Form.Item>
                </Form>
                {commandErrorText}
            </Card>
            
            <br />
            <br />
            <br />
            <div style={{ position: 'relative' }} >
                <span style={{ position: 'absolute', bottom: '0px', right: '0px' }}>
                    <Button
                        icon={<LeftOutlined />}
                        style={{ width: '100px' }}
                        onClick={() => setSelectedModuleKey('')}
                    >
                        Back
                    </Button>
                </span>
            </div>
        </div>
    )
}

export default SelectModuleCommand;