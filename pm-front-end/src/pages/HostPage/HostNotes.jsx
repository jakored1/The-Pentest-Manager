import { InfoCircleOutlined, SaveOutlined } from "@ant-design/icons";
import { Button, Form, Input, Tooltip, notification } from "antd";
import { updateHostNoteURL } from "../../components/GlobalParams";
import { useState } from "react";
import axios from "axios";


function HostsNotes({noteContent, hostKey}) {

    const [content, setContent] = useState(noteContent)
    const [isLoading, setIsLoading] = useState(false)

    const handleUpdateNote = (note) => {
        setIsLoading(true)
        note.key = hostKey
        axios.post(updateHostNoteURL, note)
        .then((res) => {
            if (res.data === 'note saved') {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
            } else {
                console.log(res.data)
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error while updating the note',
                placement: 'bottomRight'
            })
        })
        setIsLoading(false)
    }


    return (
        <div>
            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                <h1 style={{ marginRight: '8px' }} >Notes:</h1>
                <Tooltip 
                    title={
                    <p>
                        Here you can write anything you want about the host.
                        <br />
                        It is meant to be used as a way to write your workflow or general notes while pentesting, but go wild!
                        <br />
                        <br />
                        (and yes you can save the notes with Ctrl+S instead of clicking the save button)
                        <br />
                        <br />
                        *maybe in the future I'll change this text area to a nicer text editor 
                    </p>
                    }
                >
                    <InfoCircleOutlined />
                </Tooltip>
            </div>

            <Form
                layout='vertical'
                autoComplete="off"
                onFinish={handleUpdateNote}
                initialValues={{
                    note_content: content,
                }}
                disabled={isLoading}
            >
                <Form.Item
                    name="note_content"
                >
                    <Input.TextArea
                        onKeyDown={(event) => {  // Saving if user pressed Ctrl+S
                            let charCode = String.fromCharCode(event.which).toLowerCase()  // Checking what key was pressed
                            if((event.ctrlKey || event.metaKey) && charCode === 's') {  // Checking if ctrl+s was pressed
                                event.preventDefault();  // Don't open a prompt to save the html page
                                handleUpdateNote({note_content: content});  // updating notes
                            }
                        }}
                        showCount
                        rows={10}
                        onChange={(e) => setContent(e.target.value)}
                        placeholder="blah blah blah I'm a hacker blah blah blah"
                    />
                </Form.Item>

                <Form.Item>
                    <Button type='primary' icon={<SaveOutlined />} htmlType='submit' loading={isLoading}>
                        Save
                    </Button>
                </Form.Item>
            </Form>
        </div>
    )
}

export default HostsNotes;