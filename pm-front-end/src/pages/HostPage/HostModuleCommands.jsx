import { Avatar, Button, Collapse, Descriptions, Divider, Input, Popconfirm, Tabs, Tooltip, notification } from "antd"
import { useEffect, useState } from "react"
import RouteModuleCommandPage from "../../functions/routeModuleCommandPage"
import { CloseOutlined, FireOutlined, InfoCircleOutlined, PauseCircleOutlined, UploadOutlined } from "@ant-design/icons"
import RunModuleModal from "./RunModulePages/RunModuleModal"
import UploadCommandOutputModal from "./UploadCommandPages/UploadCommandOutputModal";
import { deleteCommandURL, getCommandCurrentOutputURL, getCommandOutputURL, stopCommandURL } from "../../components/GlobalParams"
import axios from "axios"


function HostModuleCommands({hostKey, modulesList, getHostInfo, hostInfo}) {

    const [searchInput, setSearchInput] = useState('')
    const [filteredResults, setFilteredResults] = useState([])
    const [openRunModuleModal, setOpenRunModuleModal] = useState(false)
    const [openUploadModuleModal, setOpenUploadModuleModal] = useState(false)
    const [modules, setModules] = useState([])
    const [runningCommands, setRunningCommands] = useState({})

    useEffect(() => {  // To set modules on host load
        setModules(modulesList)
        // eslint-disable-next-line
    }, [modulesList, hostInfo])

    useEffect(() => { // Using use effect to change value of filtered items properly when searchInput changes
        if (searchInput !== '') {
            const filteredData = modules.filter((module) => {
                return module.name.toLowerCase().includes(searchInput.toLowerCase())
            })
            setFilteredResults(filteredData)
        } else {
            setFilteredResults(modules)
        }
        // eslint-disable-next-line
    }, [searchInput])

    const stopCommand = (commandKey, moduleKey, hostKey) => {
        axios.post(stopCommandURL, {commandKey: commandKey+moduleKey+hostKey})
        .then((res) => {
            if (res.data === "stopping command") {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight',
                })
            } else {
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight',
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error while attempting to stop the command',
                placement: 'bottomRight',
            })
        })
    }

    function ModuleObject ({moduleInfo}) {

        const [commands, setCommands] = useState(moduleInfo.commands)
        
        useEffect(() => {
            // I had a bug that made newly run commands to keep making requests 
            // even after the is_running in each command changed to 'false'
            // So this is my non ideal solution to prevent finished commands from making further upate requests to the backend
            let newRunningCommands = runningCommands
            newRunningCommands[moduleInfo.key] = {}
            for (let i=0; i < commands.length; i++) {
                if (commands[i].is_running === 'false') {
                    newRunningCommands[moduleInfo.key][commands[i].command_key] = 'false'
                } else {
                    newRunningCommands[moduleInfo.key][commands[i].command_key] = 'true'
                }
            }
            setRunningCommands(newRunningCommands)
            // eslint-disable-next-line
        }, [commands])

        return (
            <div>
                <Collapse expandIconPosition="end">
                    <Collapse.Panel header={<div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                        <Avatar src={moduleInfo.icon} size={40} style={{ marginRight: '10px'}} />
                        <b>{moduleInfo.name}</b>
                    </div>}>
                        <Tabs
                            type="card"
                            tabPosition="left"
                            items={commands.map((command, index) => {

                                function UpdateModuleCommand (commandKey, moduleKey, hostKey, oldCommand, setCommands) {
                                    useEffect(() => {
                                        const interval = setInterval(() => {
                                            updateCommand()
                                        }, 5000)
                                        return () => clearInterval(interval)
                                        // eslint-disable-next-line
                                    }, [])

                                    const deleteCommand = () => {
                                        axios.post(deleteCommandURL, {commandKey: commandKey, moduleKey: moduleKey, parentKey: hostKey})
                                        .then((res) => {
                                            if (res.data === "command deleted") {
                                                notification.success({
                                                    message: 'Success',
                                                    description: res.data,
                                                    placement: 'bottomRight',
                                                })
                                                getHostInfo()
                                            } else {
                                                console.log(res.data)
                                                notification.error({
                                                    message: 'Error',
                                                    description: res.data,
                                                    placement: 'bottomRight',
                                                })
                                            }
                                        })
                                        .catch((err) => {
                                            console.log(err)
                                            notification.error({
                                                message: 'Error',
                                                description: 'Ran into an error while attempting to delete the command',
                                                placement: 'bottomRight',
                                            })
                                        })
                                    }

                                    const updateCommand = () => {
                                        // If the command is running then get updated module output
                                        if (oldCommand.is_running === 'true' && runningCommands[moduleKey][commandKey] === 'true') {
                                            // Getting commands updated output
                                            axios.get(getCommandCurrentOutputURL+commandKey+moduleKey+hostKey)
                                            .then((res) => {
                                                if (res.data !== 'command is not running') {  // If the command is still running
                                                    const editedNewCommand = oldCommand
                                                    editedNewCommand.command_output = res.data
                                                    const newCommands = [...commands]
                                                    newCommands[index] = editedNewCommand
                                                    setCommands(newCommands)
                                                } else {  // If the command is not running then make a request to get all the commands final data
                                                    // Getting commands updated final info
                                                    axios.get(getCommandOutputURL+'?cmdKey='+commandKey+'&moduleKey='+moduleKey+'&parentKey='+hostKey)
                                                    .then((res) => {
                                                        if (res.data !== "could not find requested command") {
                                                            const newCommands = [...commands]
                                                            newCommands[index] = res.data
                                                            setCommands(newCommands)
                                                        }
                                                    })
                                                    .catch((err) => {
                                                        console.log(err)
                                                    })
                                                }
                                            })
                                            .catch((err) => {
                                                console.log(err)
                                            })
                                        }
                                    }

                                    let cantDelete = false
                                    if (Object.keys(runningCommands).length !== 0) {
                                        if (command.is_running === 'true' && runningCommands[moduleKey][commandKey] === 'true') {
                                            cantDelete = true
                                        } else {
                                            cantDelete = false
                                        }
                                    }

                                    return {
                                        label: <span>
                                                {
                                                    cantDelete ? (
                                                        <Popconfirm
                                                            title="Are you sure you want to stop this command? It's still running"
                                                            onConfirm={() => stopCommand(command.command_key, moduleInfo.key, hostKey)}
                                                        >
                                                            <Button icon={<PauseCircleOutlined />} type="ghost" />
                                                        </Popconfirm>
                                                    ) : (
                                                        <Popconfirm
                                                            title="Are you sure you want to delete this command?"
                                                            onConfirm={() => deleteCommand()}
                                                        >
                                                            <Button icon={<CloseOutlined />} type="ghost" />
                                                        </Popconfirm>
                                                    )
                                                }
                                                {
                                                    oldCommand.command_title === null ? (
                                                        moduleInfo.name + ' ' + oldCommand.command_key
                                                    ) : (
                                                        oldCommand.command_title.replace(/\s/g, '').length === 0 ? 
                                                            (moduleInfo.name + ' ' + oldCommand.command_key)
                                                            :
                                                            (oldCommand.command_title)
                                                    )
                                                }
                                            </span>,
                                        key: oldCommand.command_key,
                                        children: <div>
                                            {RouteModuleCommandPage(oldCommand, moduleInfo.key)}
                                            <Divider />
                                            <Descriptions column={2} >
                                                <Descriptions.Item label='Executed Command' >
                                                    {oldCommand.executed_command}
                                                </Descriptions.Item>
                                                <Descriptions.Item label='Start Time' >
                                                    {oldCommand.command_start_time}
                                                </Descriptions.Item>
                                                <Descriptions.Item label='Total Runtime' >
                                                    {oldCommand.total_runtime}
                                                </Descriptions.Item>
                                                <Descriptions.Item label='Finish Time' >
                                                    {oldCommand.command_finish_time}
                                                </Descriptions.Item>
                                            </Descriptions>
                                        </div>
                                    }
                                }
                                return UpdateModuleCommand(command.command_key, moduleInfo.key, hostKey, command, setCommands)
                            })}
                        />
                    </Collapse.Panel>
                </Collapse>
                <br />
            </div>
        )
    }

    return (
        <div>
            <Divider orientation="left" plain style={{ fontSize: 18 }}>
                Module Commands <Tooltip
                    title={
                    <p>
                        Here you can see the results of the module commands you ran on the host, and run new ones. <br />
                        Each module has a specific way its commands outputs are disaplayed, for user comfort and workflow.
                    </p>
                    }
                >
                    <InfoCircleOutlined />
                </Tooltip>
            </Divider>
            <span>
                <Input
                    style={{
                        width: '500px',
                        marginBottom: '20px'
                    }}
                    placeholder="Find Module"
                    onChange={(e) => setSearchInput(e.target.value)}
                />
                <Button
                    icon={<FireOutlined style={{ color: 'orangered' }} />}
                    style={{ marginLeft: '10px' }}
                    onClick={() => setOpenRunModuleModal(true)}
                >
                    Run Module
                </Button>
                <Button 
                    icon={<UploadOutlined style={{ color: 'blue' }} />}
                    style={{ marginLeft: '10px' }}
                    onClick={() => setOpenUploadModuleModal(true)}
                >
                    Upload Module Output
                </Button>
            </span>
            <RunModuleModal
                openRunModuleModal={openRunModuleModal}
                setOpenRunModuleModal={setOpenRunModuleModal}
                hostKey={hostKey}
                getHostInfo={getHostInfo}
            />
            <UploadCommandOutputModal
                openUploadModuleModal={openUploadModuleModal}
                setOpenUploadModuleModal={setOpenUploadModuleModal}
                hostKey={hostKey}
                getHostInfo={getHostInfo}
            />
            {
                searchInput.length > 0 ? (
                    filteredResults.map((modules) => {
                        return (
                            <ModuleObject moduleInfo={modules} key={modules.key} />
                        )
                    })
                ) : (
                    modules.map((modules) => {
                        return (
                            <ModuleObject moduleInfo={modules} key={modules.key} />
                        )
                    })
                )
            }
        </div>
    )
}

export default HostModuleCommands;