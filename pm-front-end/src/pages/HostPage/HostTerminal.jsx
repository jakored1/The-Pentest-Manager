import { CloseOutlined, InfoCircleOutlined, PlusOutlined } from "@ant-design/icons";
import { Button, Collapse, Divider, Popconfirm, Space, Spin, Tabs, Tooltip, notification, message } from "antd";
import axios from "axios";
import React, { useEffect, useState } from "react";
import { addTerminalURL, deleteTerminalURL } from "../../components/GlobalParams";
import { DndContext, PointerSensor, useSensor } from '@dnd-kit/core';
import { SortableContext, arrayMove, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { css } from '@emotion/css';
import Terminal from "../../components/Terminal";


const DraggableTabNode = ({ className, onActiveBarTransform, ...props }) => {
    const { attributes, listeners, setNodeRef, transform, transition, isSorting } = useSortable({
        id: props['data-node-key'],
    });
    
    const style = {
        ...props.style,
        transform: CSS.Transform.toString(transform),
        transition,
        cursor: 'move',
    };

    useEffect(() => {
        if (!isSorting) {
            onActiveBarTransform('');
        } else if (className?.includes('ant-tabs-tab-active')) {
            onActiveBarTransform(css`
            .ant-tabs-ink-bar {
                transform: ${CSS.Transform.toString(transform)};
                transition: ${transition} !important;
            }`);
        }
        // eslint-disable-next-line
    }, [className, isSorting, transform]);

    return React.cloneElement(props.children, {
        ref: setNodeRef,
        style,
        ...attributes,
        ...listeners,
    });
}


function HostTerminal({hostKey, terminalInfo, setHostInfo}) {

    const [messageApi, contextHolder] = message.useMessage();
    const [tabItems, setTabItems] = useState([])
    const [className, setClassName] = useState('');
    const [terminalToDelete, setTerminalToDelete] = useState('')
    const [addTerminalTrigger, setAddTerminalTrigger] = useState(false)
    const [selectedTerminal, setSelectedTerminal] = useState('')

    const addAddTerminalTab = () => {
        return ({
            key: '0',  // The minimum a terminal key that could be is 1, so making this 0
            label: (<Button 
                icon={<PlusOutlined />}
                type="ghost"
            />),
            children: <>
                <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                    <Spin size="large" tip="Adding terminal..." />
                </Space>
            </>
        }) 
    }

    const addNormalTerminalTab = (terminalDetails) => {
        return ({
            key: terminalDetails.terminal_key,
            label: (<>
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginTop: '-10px' }}>
                    {terminalDetails.terminal_name}
                    <Popconfirm
                        title="Are you sure you want to delete this terminal?" 
                        onConfirm={() => setTerminalToDelete(terminalDetails.terminal_key)}
                        okText="Delete"
                    >
                        <Button
                            icon={<CloseOutlined />}
                            style={{ marginLeft: '5px' }} 
                            type="ghost"
                        />
                    </Popconfirm>
                </div>    
            </>),
            children: <Terminal terminalInfo={terminalDetails} />
        })
    }

    const sensor = useSensor(PointerSensor, {
        activationConstraint: {
            distance: 10,
        },
    });

    const onDragEnd = ({ active, over }) => {
        if (active.id !== over?.id) {
            setTabItems((prev) => {
                const activeIndex = prev.findIndex((i) => i.key === active.id);
                const overIndex = prev.findIndex((i) => i.key === over?.id);
                return arrayMove(prev, activeIndex, overIndex);
            });
        }
    };

    const handleDeleteTerminal = (terminalKey) => {
        // Finding the terminals index in the tabItems array so we can remove it
        let terminalPosition = -1
        for(let i=0; i < tabItems.length; i++) {
            if (terminalKey === tabItems[i].key) {  // If this is the terminal we want to delete
                terminalPosition = i
                break
            }
        }

        // Finding the add terminal tab and deleting it so we can add it in the end later
        let addTerminalPosition = -1
        for (let i=0; i < tabItems.length; i++) {  // Finding the add terminal tabs position
            if ('0' === tabItems[i].key) {  // If this is the terminal we want to delete
                addTerminalPosition = i
                break
            }
        }

        // Making sure we got the terminal and deleting it if we did
        if (terminalPosition === '-1') {
            notification.error({
                message: 'Error',
                description: 'Ran into an error while deleting terminal',
                placement: 'bottomRight'
            })
        } else {
            axios.post(deleteTerminalURL, {terminalKey: terminalKey, hostKey: hostKey})
            .then((res) => {
                if (res.data === 'Terminal Deleted') {  // If we successfully deleted the terminal
                    // Removing the deleted terminal
                    const newTabItems = [...tabItems]
                    newTabItems.splice(terminalPosition, 1)  // Removing the terminal we want to delete
                    newTabItems.splice(addTerminalPosition - 1, 1)  // Removing the add terminal tab (in it's position -1 because we removed something before)
                    newTabItems.push(addAddTerminalTab())
                    setTabItems(newTabItems)
                    // Selecting an appropiate tab after deletion
                    if (newTabItems.length > 1) {  // If there are other tabs aside from the add terminal tab
                        if (terminalPosition -1 >= 0) {  // If there is a tab on the left of the deleted terminal
                            setSelectedTerminal(newTabItems[terminalPosition-1].key)
                        } else {  // If there is a tab on the right of the deleted terminal and that tab is not the add terminal tab
                            if (newTabItems[terminalPosition].key !== '0') {
                                setSelectedTerminal(newTabItems[terminalPosition].key)
                            } 
                        }
                    }

                    messageApi.open({
                        type: 'success',
                        content: res.data
                    })
                } else {
                    notification.error({
                        message: 'Error',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err)
                notification.error({
                    message: 'Error',
                    description: 'Ran into an error while deleting terminal',
                    placement: 'bottomRight'
                })
            })
        }
        setTerminalToDelete('')
    }

    const handleAddTerminal = (newTabItems) => {
        axios.post(addTerminalURL, {hostKey: hostKey})
        .then((res) => {
            if (res.data.session_data === null) {  // Making sure the dictionary came back
                // Removing the add terminal tab
                let terminalPosition = -1
                for (let i=0; i < newTabItems.length; i++) {  // Finding the add terminal tabs position
                    if ('0' === newTabItems[i].key) {  // If this is the terminal we want to delete
                        terminalPosition = i
                        break
                    }
                }
                newTabItems.splice(terminalPosition, 1)  // Removing the add terminal tab
                newTabItems.push(addNormalTerminalTab(res.data))  // Adding the new terminal to the tabs
                newTabItems.push(addAddTerminalTab())  // Adding the final tab as a '+' button to add a terminal
                setTabItems(newTabItems)  // Setting the tabs with the updated information
                setSelectedTerminal(res.data.terminal_key)  // Selecting the new terminal
                setAddTerminalTrigger(false)
                messageApi.open({
                    type: 'success',
                    content: 'Terminal Created'
                })
            } else {
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error while creating terminal',
                placement: 'bottomRight'
            })
        })
    }

    useEffect(() => {
        // Organizing tab items from backend info
        const items = []
        terminalInfo.forEach((item) => {
            // Setting terminal contents
            items.push(addNormalTerminalTab(item))
        })
        // Adding a final object as a '+' button to add a terminal
        items.push(addAddTerminalTab())
        setTabItems(items)
        // eslint-disable-next-line
    }, [])

    useEffect(() => {
        if (terminalToDelete !== '') {  // Ignoring irrelevant activations
            handleDeleteTerminal(terminalToDelete)
        }
        // eslint-disable-next-line
    }, [terminalToDelete])

    useEffect(() => {
        if (addTerminalTrigger !== false) {
            const newTabItems = [...tabItems]
            handleAddTerminal(newTabItems)
        }
        // eslint-disable-next-line
    }, [addTerminalTrigger])

    return (
        <div>
            {contextHolder}
            <Divider orientation="left">
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                    <p style={{ marginRight: '8px', fontSize: '20px' }} >Terminal</p>
                    <Tooltip
                        title={
                        <p>
                            Here you can run commands on your machine via 'web terminals'. <br />
                            You can open multiple terminals for each host. <br /> <br />
                            It is possible to run a module command through a terminal, 
                            but the comand will run as part of the terminal commands, 
                            and therefore not be displayed in the 'Module Commands' below. <br /> <br />
                            Each session is saved unless manually deleted (by deleting the terminal). <br />
                            You can configure the terminals behaviour in the settings
                        </p>
                        }
                    >
                        <InfoCircleOutlined />
                    </Tooltip>
                </div>
            </Divider>

            <Collapse size="large">
                <Collapse.Panel header="Show Terminals">
                    <Tabs 
                        className={className}
                        items={tabItems}
                        activeKey={selectedTerminal}
                        onChange={(terminalKey) => {
                            if (terminalKey === '0') {  // If user selected add host
                                setAddTerminalTrigger(true)
                            } else {
                                setSelectedTerminal(terminalKey)
                            }
                        }} 
                        renderTabBar={(tabBarProps, DefaultTabBar) => (
                            <DndContext sensors={[sensor]} onDragEnd={onDragEnd}>
                                <SortableContext items={tabItems.map((i) => i.key)} strategy={horizontalListSortingStrategy}>
                                    <DefaultTabBar {...tabBarProps}>
                                        {(node) => (
                                            <DraggableTabNode
                                                {...node.props}
                                                key={node.key}
                                                onActiveBarTransform={setClassName}
                                            >
                                                {node}
                                            </DraggableTabNode>
                                        )}
                                    </DefaultTabBar>
                                </SortableContext>
                            </DndContext>
                        )}
                    />
                </Collapse.Panel>
            </Collapse>
        </div>
    )
}

export default HostTerminal;
