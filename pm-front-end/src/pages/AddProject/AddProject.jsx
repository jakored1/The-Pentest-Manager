import React, { useState } from "react";
import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';
import { Button, Form, Input, Space, notification } from 'antd';
import axios from "axios";
import { createProjectURL } from "../../components/GlobalParams";


function AddProject({updateSidebarTabs}) {

    const [submitButtonLoading, setSubmitButtonLoading] = useState(false)
    const [form] = Form.useForm();
    const formInitialValues = {
        projectName: null,
        hosts: null
    }

    // Success alert
    const setAlert = (res) => {

        // Update menu tabs
        updateSidebarTabs()

        // If successful project creation
        let success = false
        let backendMessage = ''


        if (res.status !== 200) {
            success = false
            backendMessage = 'Ran into error creating project'
        }

        if (res.data === 'Project created') {
            success = true
            backendMessage = res.data
        }
        if (res.data === 'Project created with hosts') {
            success = true
            backendMessage = res.data
        }
        if (res.data === 'Project created but ran into error adding hosts. You can add them again via the projects tab') {
            success = true
            backendMessage = res.data
        }
        // If project was created
        if (success) {

            // Reseting the forms values
            form.resetFields()

            // If project was created but ran into error with hosts
            if (backendMessage === 'Project created but ran into error adding hosts. You can add them again via the projects tab') {
                notification.warning({
                    message: 'Partial Success',
                    description: backendMessage,
                    placement: 'bottomRight'
                })
            } else { // If project was created successfully
                notification.success({
                    message: 'Success',
                    description: backendMessage,
                    placement: 'bottomRight'
                })
            }
        }

        // If creating project failed
        if (success === false) {
            notification.error({
                message: 'Error',
                description: backendMessage,
                placement: 'bottomRight'
            })
        }
    }

    const handleSubmit = (values) => {
        setSubmitButtonLoading(true)
        axios.post(createProjectURL, values)
        .then((res) => {
            setAlert(res)
        }).catch((err) => {
            console.log(err)
            setAlert(err)
        });
        setSubmitButtonLoading(false)
    }
    
    return(
        <div>
            <Form 
                onFinish={handleSubmit}
                layout="vertical"
                scrollToFirstError
                initialValues={formInitialValues}
                form={form}
            >
                <h1>Project Info:</h1>
                <Form.Item 
                    required
                    name="projectName"
                    label="Project Name:"
                    tooltip="What are you trying to hack?"
                    rules={[{
                        required: true,
                        whitespace: true,
                        message: 'Please enter project name'
                    }]}
                >
                    <Input placeholder="My EX's Website" style={{ maxWidth: '426px' }}/>
                </Form.Item>

                <h1>Hosts Info:</h1>
                <div style={{ display: 'flex', marginBottom: '-52px' }}>
                    <Form.Item label="Host Name:" tooltip="A name to represent the host"/>
                    <Form.Item 
                        label="Host Identifiers:"
                        tooltip={<>The ip/social media account/website/domain you want to preform tests on.<br /><br />
                                A host can have multiple addresses (IPs, Domains, etc.)<br />
                                To input multiple addresses for one host, seperate the addresses with a comma (,)<br /><br />
                                Example: 1.1.1.1,example.com,cool.website.org<br /><br />
                                Cases where a host might need multiple addresses:<br />
                                - servers with multiple IP addresses<br />
                                - servers that host multiple domains<br />
                                - entering both the servers IP address and domains<br />
                                - etc.
                                </>}
                        style={{ marginLeft: '170px' }}
                    />
                </div>
                <Form.List name="hosts">
                    {(fields, { add, remove }) => (
                        <>
                            {fields.map(({ key, name, ...restField }) => (
                                <Space
                                    key={key}
                                    style={{
                                        display: 'flex',
                                        marginBottom: '4px',
                                    }}
                                    align='baseline'
                                >
                                    <Form.Item
                                        {...restField}
                                        name={[name, 'host_name']}
                                        // label="Host Name:"
                                        rules={[{
                                            required: true,
                                            whitespace: true,
                                            message: 'Missing host name'
                                        }]}
                                        style={{ width: '250px' }}
                                    >
                                        <Input placeholder="My EX's websites server" />
                                    </Form.Item>
                                    <Form.Item
                                        {...restField}
                                        name={[name, 'host_identifiers']}
                                        // label="Host Identifiers:"
                                        rules={[{
                                            required: true,
                                            whitespace: true,
                                            message: 'Missing host identifiers'
                                        }]}
                                        style={{ width: '250px' }}
                                    >
                                        <Input placeholder="1.1.1.1 or example.com"/>
                                    </Form.Item>
                                    <MinusCircleOutlined onClick={() => remove(name)} />
                                </Space>
                            ))}
                            <Form.Item>
                                <Button 
                                    type="dashed" 
                                    onClick={() => add()} 
                                    block 
                                    icon={<PlusOutlined />}
                                    style={{ maxWidth: '508px' }}
                                >
                                    Add Host
                                </Button>
                            </Form.Item>
                        </>
                    )}
                </Form.List>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={submitButtonLoading}>
                        Create Project
                    </Button>
                </Form.Item>
            </Form>
        </div>
    )
}

export default AddProject;
