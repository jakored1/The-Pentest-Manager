import { useEffect, useState } from 'react';
import { Button, Popconfirm, notification, Space, Spin, Divider } from 'antd';
import { projectInfoURL, deleteProjectURL, themeColors } from "../../components/GlobalParams";
import { DeleteOutlined } from '@ant-design/icons';
import axios from 'axios';
import HostsTable from './HostTableFiles/HostsTable';
import FileDatatypeTable from './FileTableFiles/FileDatatypeTable';
import StringsTable from './StringTableFiles/StringsTable';
import ProjectNotes from './ProjectNotes';
import ProjectAttackChain from './ProjectAttackChain';


function ManageProject({selectedMenuItem, updateSidebarTabs, setSelectedMenuItem, darkMode}) {

    const [hostsTableData, setHostsTableData] = useState([])
    const [filesTableData, setFilesTableData] = useState([])
    const [stringsTableData, setStringsTableData] = useState([])
    const [doneLoading, setDoneLoading] = useState(false)
    const [projectInfo, setProjectInfo] = useState({})

    const getPageInfo = () => {
        setDoneLoading(false)
        axios.get(projectInfoURL+selectedMenuItem)
        .then((response) => {
            // Set icons
            setProjectInfo(response.data)
            setHostsTableData(response.data.hosts)
            setFilesTableData(response.data.files)
            setStringsTableData(response.data.strings)
            setDoneLoading(true)
        })
        .catch((err) => {
            console.log(err);
            notification.error({
                message: 'Error',
                description: "Could not fetch project data",
                placement: 'bottomRight'
            })
        });
    }

    const deleteProject = (project_key, setSelectedMenuItem, updateSidebarTabs) => {  //Deletes a project
        axios.post(deleteProjectURL, {key: project_key})
        .then((res) => {
            // Checking if the result was success or not
            if (res.data === "Project deleted") {  // If host was updated successfully
                updateSidebarTabs()  // Updating the menu
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight'
                })
                setSelectedMenuItem('0')  // Returning to home page after deleting the project
            } else { // If something went wrong
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        }).catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Something went wrong while deleting the project',
                placement: 'bottomRight'
            })
        });
    }

    // Get project's info on page load
    useEffect(() => {
        getPageInfo()
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    return (
        <div>
            {
                doneLoading
                ?  // If we got project info from backend
            <div>
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                    <h1 style={{ 
                            marginTop: '-5px', 
                            fontSize: 25, 
                            color: darkMode ? themeColors['text']['dark'] : themeColors['text']['light']
                        }}
                    >
                        {projectInfo.project.project_name}
                    </h1>
                    <Popconfirm 
                        title="Are you sure you want to delete this project?" 
                        onConfirm={() => deleteProject(projectInfo.project.project_key, setSelectedMenuItem, updateSidebarTabs)}
                        okText="Delete"
                    >
                        <Button 
                            style={{ marginLeft: 'auto', marginTop: '-25px' }} 
                            icon={<DeleteOutlined />} 
                            danger 
                            type='primary'
                        />
                    </Popconfirm>
                </div>
                <div style={{ marginTop: '-14px', fontSize: 15, display: 'flex', flexDirection: 'row', alignItems: 'center' }} >
                        <p style={{ color: 'gray', marginRight: '5px' }} >
                            Created:
                        </p>
                        <p style={{ color: darkMode ? themeColors['text']['dark'] : themeColors['text']['light'] }}>
                            {projectInfo.project.project_creation_datetime}
                        </p>
                </div>
                <ProjectNotes
                    noteContent={projectInfo.project.project_notes}
                    projectKey={projectInfo.project.project_key}
                    darkMode={darkMode}
                />
                <ProjectAttackChain
                    attackChainContent={projectInfo.attack_chain}
                    projectKey={projectInfo.project.project_key}
                    darkMode={darkMode}
                />
                <Divider orientation='left' plain style={{ fontSize: 18 }}>Project Details</Divider>
                <HostsTable 
                    updateSidebarTabs={updateSidebarTabs}
                    getPageInfo={getPageInfo}
                    projectInfo={projectInfo}
                    hostsTableData={hostsTableData}
                    setHostsTableData={setHostsTableData}
                    darkMode={darkMode}
                />
                <br />
                <FileDatatypeTable
                    filesTableData={filesTableData}
                    getPageInfo={getPageInfo}
                    projectInfo={projectInfo}
                    darkMode={darkMode}
                />
                <br />
                <StringsTable
                    stringsTableData={stringsTableData}
                    projectInfo={projectInfo}
                    darkMode={darkMode}
                />

            </div>
            :  // If we didn't get backend info yet
            <div>
                <Space size="large" direction="vertical" style={{ width: '100%', textAlign:'center' }} >
                    <Spin size="large" tip="Loading project..." />
                </Space>
            </div>
            }
        </div>
    )
}

export default ManageProject;
