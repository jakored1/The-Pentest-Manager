import { InfoCircleOutlined, SaveOutlined } from "@ant-design/icons";
import { Button, Collapse, Divider, Form, Input, Tooltip, notification } from "antd";
import { useState } from "react";
import { updateAttackChainURL } from "../../components/GlobalParams";
import axios from "axios";



function ProjectAttackChain({attackChainContent, projectKey, darkMode}) {

    const [loading, setLoading] = useState(false)
    const [form] = Form.useForm()

    const handleSumbitAttackChain = (values) => {
        setLoading(true)
        values.parentKey = projectKey
        axios.post(updateAttackChainURL, values)
        .then((res) => {
            if (res.data === 'attack chain updated') {
                notification.success({
                    message: 'Success',
                    description: res.data,
                    placement: 'bottomRight',
                })
            } else {
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight',
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error while attempting to update attack chain',
                placement: 'bottomRight',
            })
        })
        setLoading(false)
    }

    return (
        <div>
            <Divider orientation="left" plain style={{ fontSize: 18 }}>
                Project Attack Chain <Tooltip 
                    title={<p>
                        So what is an Attack Chain?<br />
                        An attack chain is a set of commands that you would create after finding exploits in 
                        a target, to be able to continue your attack where you left off.<br />
                        For example, you are pentesting multiple servers, 
                        and want to quickly execute the same exploits you used before, to get a shell again.<br />
                        The set off commands you use to do that would be your attack chain.<br /><br />
                        You can only execute attack chains via the <b>pmcli</b>, but you can edit them through the web interface.
                    </p>}
                >
                    <InfoCircleOutlined />
                </Tooltip>
            </Divider>
            <Collapse>
                <Collapse.Panel
                    header="Edit Attack Chain"
                    key="1"
                >
                    <Form
                        layout='vertical'
                        autoComplete="off"
                        onFinish={handleSumbitAttackChain}
                        initialValues={{ content: attackChainContent }}
                        form={form}
                    >
                        <Form.Item name="content">
                            <Input.TextArea
                                showCount
                                onKeyDown={(event) => {  // Saving if user pressed Ctrl+S
                                    let charCode = String.fromCharCode(event.which).toLowerCase()  // Checking what key was pressed
                                    if((event.ctrlKey || event.metaKey) && charCode === 's') {  // Checking if ctrl+s was pressed
                                        event.preventDefault();  // Don't open a prompt to save the html page
                                        form.submit()
                                    }
                                }}
                                placeholder="A set of bash commands"
                                rows={10}
                            />
                        </Form.Item>
                        <Form.Item>
                            <div style={{ position: 'relative' }} >
                                <span style={{ position: 'absolute', right: '0px', top: '0px' }}>
                                    <Button 
                                        icon={<SaveOutlined style={{ color: 'blue' }} />} 
                                        htmlType='submit'
                                        loading={loading}
                                    >
                                        Save
                                    </Button>
                                </span>
                            </div>
                        </Form.Item>
                    </Form>
                </Collapse.Panel>
            </Collapse>
        </div>
    )
}

export default ProjectAttackChain;
