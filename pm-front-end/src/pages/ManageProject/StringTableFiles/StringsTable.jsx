import { DeleteOutlined, InfoCircleOutlined, PlusOutlined, SaveOutlined } from "@ant-design/icons";
import { Button, Popconfirm, Table, Tooltip, InputNumber, Input, Form, notification, message } from "antd";
import { useState } from "react";
import { deleteStringURL, addStringURL, updateStringURL } from "../../../components/GlobalParams";
import axios from "axios";


const EditableTableCell = ({
    save,
    editing,
    dataIndex,
    title,
    inputType,
    record,
    index,
    children,
    ...restProps
}) => {
    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />
    return (
        <td {...restProps}>
            {editing ? ( //If we are editing
                <Form.Item
                    name={dataIndex}
                    style={{ margin: 0 }}
                    rules={[{
                        required: true,
                        message: "please enter input",
                    }]}
                    onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                            save(record)
                        }
                    }}
                >
                    {inputNode}
                </Form.Item>
            ) : ( //If we are not editing
                children
            )}
        </td>
    );
};

function StringsTable({stringsTableData, projectInfo}) {

    const [tableData, setTableData] = useState(stringsTableData)
    const [tableLoading, setTableLoading] = useState(false)
    const [addStringButtonDisabled, setAddStringButtonDisabled] = useState(false)
    const [editingKey, setEditingKey] = useState('')
    const [form] = Form.useForm()
    const columns = [
        {
            title: "String Value",
            dataIndex: "string",
            width: '80%',
            editable: true
        },
        {
            title: "Edit String",
            dataIndex: "edit_string",
            render: (_, record) => {
                const editable = isEditing(record);
                return editable ? (
                    <span>
                        <Button style={{ marginRight: 8 }} onClick={() => save(record)} icon={<SaveOutlined />} type='primary' >
                            Save
                        </Button>
                        <Button onClick={cancel}>
                            Cancel
                        </Button>
                    </span>
                ) : (
                    <span>
                        <Button disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 10 }} >
                            Edit
                        </Button>
                        <Popconfirm title="Are you sure you want to delete this string?" onConfirm={() => deleteString(record)}>
                            <Button disabled={editingKey !== ''} icon={<DeleteOutlined />} danger >
                                Delete
                            </Button>
                        </Popconfirm>
                    </span>
                )
            }
        }
    ]

    const mergedColumns = columns.map((col) => {
        if (!col.editable) {
            return col;
        }
        return {
            ...col,
            onCell: (record) => ({
                record,
                inputType: 'text',
                dataIndex: col.dataIndex,
                title: col.title,
                save: save,
                editing: isEditing(record),
            })
        }
    })

    const deleteString = async (record) => { // Delete requested host
        setTableLoading(true)
        record.project_key = projectInfo.project.project_key
        try{
            const newData = [...tableData];
            const index = newData.findIndex((item) => record.key === item.key);
            
            if (index > -1) {
                newData.splice(index, 1)
            }
            axios.post(deleteStringURL, record)
            .then((res) => {
                // Checking if the result was success or not
                if (res.data === "string deleted") { // If command was deleted successfully
                    // notification.success({
                    //     message: 'Success',
                    //     description: res.data,
                    //     placement: 'bottomRight'
                    // })
                    // I decided to use a message in the top middle because if you are deleting/adding multiple strings the notification gets in the way
                    message.success({
                        content: res.data
                    })
                    setTableData(newData);
                } else { // If something went wrong
                    notification.error({
                        message: 'Error',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                }
                setEditingKey('');
            })
            .catch((err) => {
                console.log(err);
                notification.error({
                    message: 'Error',
                    description: 'Ran into error deleting string',
                    placement: 'bottomRight'
                })
            });
        } catch (errInfo) {
            console.log('Validate Failed: ', errInfo)
        }
        setTableLoading(false)
    }

    const handleAddString = () => {
        setAddStringButtonDisabled(true)
        setTableLoading(true)
        const newData = [...tableData];
        axios.post(addStringURL, {projectKey: projectInfo.project.project_key})
        .then((res) => {
            // Checking if the result was success or not
            if (res.data.string === 'new string') {
                newData.push(res.data)
                setTableData(newData);
                // notification.success({
                //     message: 'Success',
                //     description: 'string added',
                //     placement: 'bottomRight'
                // })
                // I decided to use a message in the top middle because if you are deleting/adding multiple strings the notification gets in the way
                message.success({
                    content: 'string added'
                })
            } else {  // If something went wrong
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
            setEditingKey('');
        }).catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into an error while adding new string',
                placement: 'bottomRight'
            })
        });
        setTableLoading(false)
        setAddStringButtonDisabled(false)
    }

    const save = async (record) => { //Save the new edited information to the backend
        setTableLoading(true)
        try {
            const row = await form.validateFields();
            const newData = [...tableData];
            const index = newData.findIndex((item) => record.key === item.key);
            if (index > -1) {
                const item = newData[index];
                newData.splice(index, 1, {
                    ...item,
                    ...row
                })
                // Sending info to the backend server
                let updatedStringInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateStringURL, updatedStringInfo)
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "string updated") { // If command was updated successfully
                        setTableData(newData);
                        // notification.success({
                        //     message: 'Success',
                        //     description: res.data,
                        //     placement: 'bottomRight'
                        // })
                        // I decided to use a message in the top middle because if you are deleting/adding multiple strings the notification gets in the way
                        message.success({
                            content: 'string added'
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                    notification.error({
                        message: 'Error',
                        description: 'Ran into an error while updating the string',
                        placement: 'bottomRight'
                    })
                });
            } 
            else {
                // Sending info to the backend server
                let updatedStringInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateStringURL, {string: updatedStringInfo, stringKey: record.key})
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "string updated") { // If command was updated successfully
                        setTableData(newData);
                        // notification.success({
                        //     message: 'Success',
                        //     description: res.data,
                        //     placement: 'bottomRight'
                        // })
                        // I decided to use a message in the top middle because if you are deleting/adding multiple strings the notification gets in the way
                        message.success({
                            content: res.data
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                    notification.error({
                        message: 'Error',
                        description: 'Ran into an error while updating the string',
                        placement: 'bottomRight'
                    })
                });
            }
        } catch (errInfo) {
            console.log('Validate Failed: ', errInfo)
        }
        setTableLoading(false)
    }

    const isEditing = (record) => {  //Return true if user is editing
        if (record.key === editingKey)
            return true
    }

    const edit = (record) => {  //Change rows form contents when user is editing
        form.setFieldsValue({
            command: '',
            description: '',
            ...record,
        });
        setEditingKey(record.key)  //Set the table key that is being edited
    }

    const cancel = () => {  //Change the table key that is being edited to nothing when we are not editting
        setEditingKey('')
    }

    return (
        <div>
            <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '3px', alignItems: 'center' }}>
                <h3>
                    {"Strings (" + tableData.length + "):"}
                </h3>
                <Button
                    onClick={() => handleAddString()}
                    style={{ marginLeft: '10px' }}
                    size='small'
                    disabled={addStringButtonDisabled}
                >
                    <PlusOutlined />
                </Button>
                <div style={{ marginLeft: '15px' }}>
                    <Tooltip
                    title={
                        <p>
                            Strings that you would like to quickly add to your module's commands
                        </p>
                        }
                    >
                        <InfoCircleOutlined style={{ fontSize: '18px' }} />
                    </Tooltip>
                </div>
            </div>
            <Form form={form} component={false}>
                <Table
                    components={{
                        body: {
                            cell: EditableTableCell
                        }
                    }}
                    bordered
                    dataSource={tableData}
                    columns={mergedColumns}
                    pagination={false}
                    loading={tableLoading}
                />
            </Form>
        </div>
    )
}

export default StringsTable;
