import { Tabs, Button, Form, Input, Modal, notification, Upload } from "antd";
import { FileAddOutlined, FormOutlined, UploadOutlined, InboxOutlined, LoadingOutlined } from "@ant-design/icons";
import axios from "axios";
import { createFileURL, uploadFileURL } from "../../../components/GlobalParams";
import { useState } from "react";


function AddFileModal({addFileOpen, setAddFileOpen, projectInfo, setTableData, tableData}) {

    const [uploadFilesList, setUploadFilesList] = useState([]);
    const [uploading, setUploading] = useState(false);
    const [form] = Form.useForm()

    const CreateFilePage = () => {
        return (
            <Form
                layout='vertical'
                autoComplete="off"
                onFinish={handleCreateFile}
                initialValues={{
                    file_name: '',
                    file_content: ''
                }}
                form={form}
            >
                <Form.Item
                    label="File Name"
                    name="file_name"
                    rules={[{
                        required: true,
                        whitespace: true,
                        message: 'Missing file name'
                    }]}
                    tooltip="The name of the file you want to create"
                >
                    <Input 
                        placeholder="File Name"
                        onKeyDown={(event) => {  // Saving if user pressed Ctrl+S
                            let charCode = String.fromCharCode(event.which).toLowerCase()  // Checking what key was pressed
                            if((event.ctrlKey || event.metaKey) && charCode === 's') {  // Checking if ctrl+s was pressed
                                event.preventDefault();  // Don't open a prompt to save the html page
                                form.submit()
                            }
                        }}
                    />
                </Form.Item>
                <br />
                <Form.Item
                    label="File Content"
                    name="file_content"
                    tooltip="The contents of the new file you are creating"
                >
                    <Input.TextArea
                        showCount
                        placeholder="blah blah blah blah blah"
                        autoSize={{
                            minRows: 14,
                            maxRows: 14
                        }}
                        onKeyDown={(event) => {  // Saving if user pressed Ctrl+S
                            let charCode = String.fromCharCode(event.which).toLowerCase()  // Checking what key was pressed
                            if((event.ctrlKey || event.metaKey) && charCode === 's') {  // Checking if ctrl+s was pressed
                                event.preventDefault();  // Don't open a prompt to save the html page
                                form.submit()
                            }
                        }}
                    />
                </Form.Item>
                <br />
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', float: 'right' }}>
                    <Form.Item style={{ marginRight: '8px' }}>
                        <Button onClick={() => setAddFileOpen(false)}>
                            Cancel
                        </Button>
                    </Form.Item>
                    <Form.Item>
                        <Button type='primary' icon={<FileAddOutlined />} htmlType='submit'>
                            Create File
                        </Button>
                    </Form.Item>
                </div>
            </Form>
        )
    }

    const UploadFilesPage = () => {
        return (
            <div>
                <Upload.Dragger 
                    disabled={uploading}
                    name="files"
                    multiple={true}
                    onRemove={(file) => {
                        const index = uploadFilesList.indexOf(file);
                        const newFileList = uploadFilesList.slice();
                        newFileList.splice(index, 1);
                        setUploadFilesList(newFileList)
                    }}
                    beforeUpload={(file) => {
                        setUploadFilesList([...uploadFilesList, file]);
                        return false;
                    }}
                    fileList={uploadFilesList}
                >
                    <p style={{ fontSize: '300%', color: 'blue' }}>
                        {uploading ? <LoadingOutlined /> : <InboxOutlined />}
                    </p>
                    <p style={{ fontSize: '120%' }}>Click or drag a file to this area to upload</p>
                    {/* <p>Files dragged or selected will be automatically uploaded</p> */}
                </Upload.Dragger>
                <br />
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', float: 'right' }}>
                    <Button onClick={() => setAddFileOpen(false)} style={{ marginRight: '8px' }}>
                        Cancel
                    </Button>
                    <Button 
                        type='primary' 
                        icon={<FileAddOutlined />} 
                        onClick={handleUploadFiles} 
                        disabled={uploadFilesList.length === 0}
                        loading={uploading}
                    >
                        Upload Files
                    </Button>
                </div>
            </div>
        )
    }

    const tabsItems = [
        {
            key: '1',
            label: <span><FormOutlined />Create File</span>,
            children: <CreateFilePage />
        },
        {
            key: '2',
            label: <span><UploadOutlined />Upload Files</span>,
            children: <UploadFilesPage />
        }
    ]

    const handleUploadFiles = () => {
        const formData = new FormData();
        uploadFilesList.forEach((file) => {
            file.status = 'uploading'
            formData.append('uploadedFiles', file);
        });

        setUploading(true);
        const newData = [...tableData];
        const uploadedFilesPosition = []

        axios.post(uploadFileURL+projectInfo.project.project_key, formData)
        .then((res) => {
            // uploadFilesList[0].status = 'error'
            res.data.forEach((fileRes) => {
                // If we ran into an error
                if (fileRes.result === 'Ran into an error when uploading the file' || fileRes.result === 'A file with that name already exists') {
                    uploadFilesList[fileRes.position].status = 'error'
                    uploadFilesList[fileRes.position].response = fileRes.result
                } else {
                    uploadFilesList[fileRes.position].status = 'done'
                    uploadFilesList[fileRes.position].response = 'file uploaded'
                    newData.push(fileRes.result)
                    setTableData(newData);
                    uploadedFilesPosition.push(fileRes.position)
                }
            })
            // After updaiting each files status, we can remove the uploaded files from the list
            const newUploadedFilesList = []
            for (let i=0; i < uploadFilesList.length; i++) {
                if (uploadedFilesPosition.includes(i) === false) { // If this file was not uploaded
                    newUploadedFilesList.push(uploadFilesList[i])
                }
            }
            setUploadFilesList(newUploadedFilesList)  // Removing the already uploaded files from the file list
            if (newUploadedFilesList.length === 0) {  // If all files were uploaded successfully give a notification
                notification.success({
                    message: 'Success',
                    description: 'files uploaded',
                    placement: 'bottomRight'
                })
                setAddFileOpen(false)
            } else {  // If some files were not uploaded successfully
                notification.error({
                    message: 'Error',
                    description: 'Ran into an error while uploading some files',
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'Ran into error uploading the files',
                placement: 'bottomRight'
            })
        })
        .finally(() => {
            setUploading(false)
        })

    }

    const handleCreateFile = (values) => {
        const newData = [...tableData];
        // Adding parent project key to file info
        values.project_key = projectInfo.project.project_key
        // Creating new file
        axios.post(createFileURL, values)
        .then((res) => {
            // Checking if the result was success or not
            try {  // If command was added it will be a JSON
                if (res.data === 'A file already exists with that name') {
                    notification.error({
                        message: 'Error',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                } else {
                    newData.push(JSON.parse(JSON.stringify(res.data)))
                    setTableData(newData);
                    notification.success({
                        message: 'Success',
                        description: 'file created',
                        placement: 'bottomRight'
                    })
                    setAddFileOpen(false)
                }
            } catch (e) {  // If something went wrong
                console.log(e)
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err)
            notification.error({
                message: 'Error',
                description: 'ran into an error while creating the file',
                placement: 'bottomRight'
            })
        })
    }

    return (
        <Modal
            title='Add New File'
            open={addFileOpen}
            onCancel={() => {
                setUploadFilesList([])
                setUploading(false)
                setAddFileOpen(false)
            }}
            width={'70%'}
            footer={[]}
        >
            <Tabs 
                defaultActiveKey="1"
                items={tabsItems}
            />
        </Modal>
    )
}

export default AddFileModal;