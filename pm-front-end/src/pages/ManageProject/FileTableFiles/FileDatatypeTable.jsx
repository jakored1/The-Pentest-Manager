import { useEffect, useState } from 'react';
import { Table, Button, Popconfirm, notification, Tooltip } from 'antd';
import EditFileModal from './EditFileModal';
import AddFileModal from './AddFileModal';
import { DeleteOutlined, PlusOutlined, InfoCircleOutlined, QuestionCircleOutlined } from '@ant-design/icons';
import { deleteFileURL } from '../../../components/GlobalParams';
import axios from 'axios';


function FileDatatypeTable({filesTableData, getPageInfo, projectInfo}) {
    
    const [editTextOpen, setEditTextOpen] = useState(false)
    const [addFileOpen, setAddFileOpen] = useState(false)
    const [tableData, setTableData] = useState(filesTableData)
    const [fileDetails, setFileDetails] = useState('')
    const [fileSelectedTrigger, setFileSelectedTrigger] = useState(false)


    const columns = [
        {
            title: <>{"Name "}
                <Tooltip title="Hover over a file's name to see it's full path">
                    <QuestionCircleOutlined />
                </Tooltip></>,
            dataIndex: "name",
            width: '37%',
            render: (fileName, record) => {
                return (
                    <Tooltip title={record.full_file_path}>
                        {fileName}
                    </Tooltip>
                )
            }
        },
        {
            title: "File Size",
            dataIndex: "size",
            width: '28%',
        },
        {
            title: "Last Modified",
            dataIndex: "last_modified",
            width: '15%',
        },
        {
            title: "Edit File",
            dataIndex: "edit_file",
            render: (_, record) => {
                return (
                    <div style={{ display: 'flex', flexDirection: 'row' }}>
                    <Button onClick={() => {
                        setFileDetails(record)
                        if (fileSelectedTrigger === true)
                            setFileSelectedTrigger(false)
                        else
                            setFileSelectedTrigger(true)
                        }} 
                        style={{ marginRight: 10 }}
                    >
                        Edit
                    </Button>
                    <Popconfirm title="Are you sure you want to delete this file?" onConfirm={() => deleteFile(record)}>
                        <Button icon={<DeleteOutlined />} danger >
                            Delete
                        </Button>
                    </Popconfirm>
                    </div>
                )
            }
        }
    ]

    useEffect(() => {  // When a file is selected
        if (fileDetails !== '')  {// To avoid opening on page load
            setEditTextOpen(true)
        }
        // eslint-disable-next-line
    }, [fileSelectedTrigger])

    const deleteFile = (fileToDelete) => {

        const newData = [...tableData];
        const index = newData.findIndex((item) => fileToDelete.key === item.key);

        if (index > -1) {
            newData.splice(index, 1)
        }

        axios.post(deleteFileURL, fileToDelete)
            .then((res) => {
                if (res.data === 'file deleted') {
                    notification.success({
                        message: 'Success',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                    // getPageInfo()
                    setTableData(newData)
                } else {
                    notification.error({
                        message: 'Error',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err)
                notification.error({
                    message: 'Error',
                    description: 'Ran into error while deleting file',
                    placement: 'bottomRight'
                })
            })
    }

    const handleAddFile = () => {
        setAddFileOpen(true)
    }

    return (
        <div>
            <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '3px', alignItems: 'center' }}>
                <h3>
                    {"Files (" + tableData.length + "):"}
                </h3>
                <Button 
                    onClick={() => handleAddFile()}
                    style={{ marginLeft: '10px' }}
                    size='small'    
                >
                    <PlusOutlined />
                </Button>
                <div style={{ marginLeft: '15px' }}>
                    <Tooltip 
                    title={
                        <p>
                            These files are meant to be files that you obtained throughout your pentesting.<br/>
                            It might be better to use very large wordlists, and large files like 'rockyou.txt' as a STRING datatype.<br/>
                            Large files could slow the loading of this page and potentially crash the front or back end of the website.<br/>
                            Further updates might address this issue and support larger files.<br/>
                            (I didn't do thorough testing on this subject)
                        </p>
                        }
                    >
                        <InfoCircleOutlined style={{ fontSize: '18px' }} />
                    </Tooltip>
                </div>
            </div>
            <Table
                bordered
                dataSource={tableData}
                columns={columns}
                pagination={false}
            />
            <EditFileModal 
                editTextOpen={editTextOpen}
                setEditTextOpen={setEditTextOpen}
                fileDetails={fileDetails}
                getPageInfo={getPageInfo}
            />
            <AddFileModal
                addFileOpen={addFileOpen}
                setAddFileOpen={setAddFileOpen}
                projectInfo={projectInfo}
                setTableData={setTableData}
                tableData={tableData}
            />
        </div>
    )
}

export default FileDatatypeTable;
