import { useState } from 'react';
import { Table, Button, Form, InputNumber, Input, notification, Popconfirm, Modal, Tooltip, message } from 'antd';
import { updateHostURL, deleteHostURL, themeColors } from "../../../components/GlobalParams";
import { PlusOutlined, DeleteOutlined, SaveOutlined, QuestionCircleOutlined } from '@ant-design/icons';
import AddHostModal from './AddHostModal';
import axios from 'axios';


const EditableTableCell = ({
    save,
    editing,
    dataIndex,
    title,
    inputType,
    record,
    index,
    children,
    ...restProps
}) => {
    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />
    return (
        <td {...restProps}>
            {editing ? ( //If we are editing
                <Form.Item
                    name={dataIndex}
                    style={{ margin: 0 }}
                    rules={[{
                        required: true,
                        message: "please enter input",
                    }]}
                    onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                            save(record)
                        }
                    }}
                >
                    {inputNode}
                </Form.Item>
            ) : ( //If we are not editing
                children
            )}
        </td>
    );
};


function HostsTable({updateSidebarTabs, getPageInfo, projectInfo, hostsTableData, setHostsTableData, darkMode}) {

    const [isModalOpen, setIsModalOpen] = useState(false)
    const [editingKey, setEditingKey] = useState('')
    const [form] = Form.useForm()

    const columns = [
        {
            title: "Host Name",
            dataIndex: "host_name",
            width: '25%',
            editable: true
        },
        {
            title: <>{"Host Identifiers "}
                <Tooltip title={<>The ip/social media account/website/domain you want to preform tests on.<br /><br />
                                A host can have multiple addresses (IPs, Domains, etc.)<br />
                                To input multiple addresses for one host, seperate the addresses with a comma (,)<br /><br />
                                Example: 1.1.1.1,example.com,cool.website.org<br /><br />
                                Cases where a host might need multiple addresses:<br />
                                - servers with multiple IP addresses<br />
                                - servers that host multiple domains<br />
                                - entering both the servers IP address and domains<br />
                                - etc.
                                </>} 
                >
                    <QuestionCircleOutlined />
                </Tooltip></>,
            dataIndex: "host_identifiers",
            width: '40%',
            editable: true
        },
        {
            title: "Creation Time",
            dataIndex: "host_creation_time",
            width: '15%',
            editable: false
        },
        {
            title: "Edit Host",
            dataIndex: "edit_host",
            render: (_, record) => {
                const editable = isEditing(record);
                return editable ? (
                    <span>
                        <Button style={{ marginRight: 8 }} onClick={() => save(record)} icon={<SaveOutlined />} type='primary' >
                            Save
                        </Button>
                        <Button onClick={cancel}>
                            Cancel
                        </Button>
                    </span>
                ) : (
                    <span>
                        <Button disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 10 }} >
                            Edit
                        </Button>
                        <Popconfirm title="Are you sure you want to delete this host?" onConfirm={() => deleteHost(record)}>
                            <Button disabled={editingKey !== ''} icon={<DeleteOutlined />} danger >
                                Delete
                            </Button>
                        </Popconfirm>
                    </span>
                )
            }
        }
    ]

    const mergedColumns = columns.map((col) => {
        if (!col.editable) {
            return col;
        }
        return {
            ...col,
            onCell: (record) => ({
                record,
                inputType: 'text',
                dataIndex: col.dataIndex,
                title: col.title,
                save: save,
                editing: isEditing(record),
            })
        }
    })

    const save = async (record) => { //Save the new edited information to the backend
        try {
            const row = await form.validateFields();
            const newData = [...hostsTableData];
            const index = newData.findIndex((item) => record.key === item.key);
            if (index > -1) {
                const item = newData[index];
                newData.splice(index, 1, {
                    ...item,
                    ...row
                })
                // Sending info to the backend server
                let updatedHostInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateHostURL, updatedHostInfo)
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "Host updated") { // If host was updated successfully
                        setHostsTableData(newData);
                        // notification.success({
                        //     message: 'Success',
                        //     description: res.data,
                        //     placement: 'bottomRight'
                        // })
                        message.success({
                            content: res.data
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                });
            } 
            else {
                // Sending info to the backend server
                let updatedHostInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateHostURL, updatedHostInfo)
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "Host updated successfully") { // If host was updated successfully
                        newData.push(row)
                        setHostsTableData(newData)
                        notification.success({
                            message: 'Success',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                });
            }
        } catch (errInfo) {
            console.log('Validate Failed: ', errInfo)
        }
    }

    const deleteHost = (record) => { // Delete requested host
        axios.post(deleteHostURL, {key: record.key})
        .then((res) => {
            // Checking if the result was success or not
            if (res.data === "Host deleted") { // If host was updated successfully
                // notification.success({
                //     message: 'Success',
                //     description: res.data,
                //     placement: 'bottomRight'
                // })
                message.success({
                    content: res.data
                })
                updateSidebarTabs() // Updating the sidebar tabs
                getPageInfo() // Getting the page info again to reload the table after removing the host
            } else { // If something went wrong
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err);
        });

        setEditingKey('')
    }

    const isEditing = (record) => {  //Return true if user is editing
        if (record.key === editingKey)
            return true
    }

    const edit = (record) => {  //Change rows form contents when user is editing
        form.setFieldsValue({
            host_name: '',
            host_identifiers: '',
            host_creation_time: '',
            ...record,
        });
        setEditingKey(record.key)  //Set the table key that is being edited
    }

    const cancel = () => {  //Change the table key that is being edited to nothing when we are not editting
        setEditingKey('')
    }

    return (
        <div>
            <div style={{ display: 'flex', flexDirection: 'row', marginBottom: '3px', alignItems: 'center' }}>
                <h3
                    style={{ color: darkMode ? themeColors['text']['dark'] : themeColors['text']['light'] }}
                >
                    {"Hosts (" + projectInfo.hosts.length + "):"}
                </h3>
                <Button 
                    onClick={() => setIsModalOpen(true)}
                    style={{ marginLeft: '10px' }}
                    size='small'    
                >
                    <PlusOutlined />
                </Button>
                <Modal 
                    title="Create Host:"
                    open={isModalOpen}
                    onCancel={() => setIsModalOpen(false)}
                    footer={null}
                    style={{
                        padding: 0,
                        overflow: 'hidden'
                    }}
                >
                    <AddHostModal 
                        projectInfo={projectInfo}
                        setIsModalOpen={setIsModalOpen}
                        updateSidebarTabs={updateSidebarTabs}
                        getPageInfo={getPageInfo}
                    />
                </Modal>
            </div>

            <Form form={form} component={false}>
                <Table 
                    components={{
                        body: {
                            cell: EditableTableCell
                        }
                    }}
                    bordered
                    dataSource={hostsTableData}
                    columns={mergedColumns}
                    // rowClassName="editable-row"
                    pagination={false}
                />

            </Form>
        </div>
    )
}

export default HostsTable;
