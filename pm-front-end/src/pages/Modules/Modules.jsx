import { Avatar, Card, Input, notification } from "antd";
import { useEffect, useState } from "react";
import Meta from "antd/es/card/Meta";
import axios from "axios";
import { loadModulesURL } from "../../components/GlobalParams";
import ModulePage from "./ModulePage";


function Modules() {

    const [searchInput, setSearchInput] = useState('')
    const [filteredResults, setFilteredResults] = useState([])
    const [modulesList, setModulesList] = useState([])
    const [loadingModules, setLoadingModules] = useState(true)
    const [moduleOpen, setModuleOpen] = useState(false)
    const [selectedModuleName, setSelectedModuleName] = useState('')
    const [selectedModuleKey, setSelectedModuleKey] = useState('')
    const [moduleSelectedTrigger, setModuleSelectedTrigger] = useState(false)
    const [firstTimeLoadingPage, setFirstTimeLoadingPage] = useState(true)


    const filterModules = (searchValue) => {
        setSearchInput(searchValue)        
    }

    const ModuleObject = ({module}) => {
        return (
            <div style={{ width: '25%' }}>
                <Card
                    style={{
                        marginRight: '20px',
                        marginBottom: '20px',
                        textAlign: 'center',
                        verticalAlign: 'middle'
                    }}
                    hoverable
                    bordered={true}
                    onClick={() => {
                        setSelectedModuleName(module.name);
                        setSelectedModuleKey(module.key);
                        if (moduleSelectedTrigger === true)
                            setModuleSelectedTrigger(false)
                        else
                            setModuleSelectedTrigger(true)
                        }}
                    loading={loadingModules}
                >
                    <Meta
                        avatar={<Avatar src={module.icon} size={50} />}
                        title={module.name}
                        description={module.description}
                    />
                </Card>
            </div>
        )
    }

    useEffect(() => { // Using use effect to change value of filtered items properly when searchInput changes
        if (searchInput !== '') {
            const filteredData = modulesList.filter((module) => {
                return module.name.toLowerCase().includes(searchInput.toLowerCase())
            })
            setFilteredResults(filteredData)
        } else {
            setFilteredResults(modulesList)
        }
        // eslint-disable-next-line
    }, [searchInput])

    useEffect(() => { // To handle when a module is selected
        if (selectedModuleName !== '')  // To avoid opening on page load
            setModuleOpen(true)
        // eslint-disable-next-line
    }, [moduleSelectedTrigger])

    useEffect(() => {
        axios.get(loadModulesURL)
        .then((response) => {
            setModulesList(response.data)
            if (response.data.length < 1) {
                notification.error({
                    message: 'Error',
                    description: 'Could not fetch modules',
                    placement: 'bottomRight'
                })
            }
        })
        .catch((err) => {
            console.log(err);
            notification.error({
                message: 'Error',
                description: 'Could not fetch modules',
                placement: 'bottomRight'
            })
        });
        setLoadingModules(false)
        // eslint-disable-next-line
    }, [])


    return (
        <div>
            <h1>Filter Modules:</h1>
            <Input 
                style={{
                    width: '500px',
                    marginBottom: '20px'
                }}
                placeholder="Find Module"
                onChange={(e) => filterModules(e.target.value)}
            />
            <br />
            <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
                {
                    searchInput.length > 0 ? (
                        filteredResults.map((module) => {
                            return (
                                <ModuleObject module={module} key={module.key} />
                            )
                        })
                    ) : (
                        modulesList.map((module) => {
                            return (
                                <ModuleObject module={module} key={module.key} />
                            )
                        })
                    )
                }
            </div>
            <ModulePage 
                moduleOpen={moduleOpen}
                setModuleOpen={setModuleOpen}
                selectedModuleKey={selectedModuleKey}
                firstTimeLoadingPage={firstTimeLoadingPage}
                setFirstTimeLoadingPage={setFirstTimeLoadingPage}
            />
        </div>
    )
}

export default Modules;
