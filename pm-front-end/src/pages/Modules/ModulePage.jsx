import { useEffect, useState } from "react";
import axios from "axios";
import { getModuleInfoURL, moduleIconURL, updateModuleCommandURL, deleteModuleCommandURL, addModuleCommandURL, getDatatypesURL } from "../../components/GlobalParams";
import { notification, Form, Input, InputNumber, Modal, Table, Button, Popconfirm, Avatar, Tooltip, message } from "antd";
import { DeleteOutlined, SaveOutlined, InfoCircleOutlined, PlusOutlined, QuestionCircleOutlined } from "@ant-design/icons";
import addToModuleCommand from '../../functions/addToModuleCommands'


const EditableTableCell = ({
    save,
    editing,
    dataIndex,
    title,
    inputType,
    record,
    index,
    children,
    ...restProps
}) => {
    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />
    return (
        <td {...restProps}>
            {editing ? ( //If we are editing
                <Form.Item
                    name={dataIndex}
                    style={{ margin: 0 }}
                    rules={[{
                        required: true,
                        message: "please enter input",
                    }]}
                    onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                            save(record)
                        }
                    }}
                >
                    {inputNode}
                </Form.Item>
            ) : ( //If we are not editing
                children
            )}
        </td>
    );
};


function ModulePage({moduleOpen, setModuleOpen, selectedModuleKey, firstTimeLoadingPage, setFirstTimeLoadingPage}) {

    const [datatypeInfo, setDatatypeInfo] = useState(<></>)
    const [tableLoading, setTableLoading] = useState(false)
    const [addCommandButtonDisabled, setAddCommandButtonDisabled] = useState(false)
    const [moduleInfo, setModuleInfo] = useState({})
    const [moduleCommands, setModuleCommands] = useState([])
    const [editingKey, setEditingKey] = useState('')
    const addToCommandForNiceOutput = addToModuleCommand(selectedModuleKey)
    const [form] = Form.useForm()
    const columns = [
        {
            title: <>{"Command "}
                <Tooltip title={datatypeInfo} 
                style={{ marginLeft: '100px' }}>
                    <QuestionCircleOutlined />
                </Tooltip></>,
            dataIndex: "command",
            width: '45%',
            editable: true,
        },
        {
            title: "Command Description",
            dataIndex: "description",
            width: '35%',
            editable: true
        },
        {
            title: "Edit Command",
            dataIndex: "edit_command",
            render: (_, record) => {
                const editable = isEditing(record);
                return editable ? (
                    <span>
                        <Button style={{ marginRight: 8 }} onClick={() => save(record)} icon={<SaveOutlined />} type='primary' >
                            Save
                        </Button>
                        <Button onClick={cancel}>
                            Cancel
                        </Button>
                    </span>
                ) : (
                    <span>
                        <Button disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 10 }} >
                            Edit
                        </Button>
                        <Popconfirm title="Are you sure you want to delete this command?" onConfirm={() => deleteCommand(record)}>
                            <Button disabled={editingKey !== ''} icon={<DeleteOutlined />} danger >
                                {/* Delete */}
                            </Button>
                        </Popconfirm>
                    </span>
                )
            }
        }
    ]

    const mergedColumns = columns.map((col) => {
        if (!col.editable) {
            return col;
        }
        return {
            ...col,
            onCell: (record) => ({
                record,
                inputType: 'text',  // On their page it was like this col.dataIndex === 'age' ? 'number' : 'text',
                dataIndex: col.dataIndex,
                title: col.title,
                save: save,
                editing: isEditing(record),
            })
        }
    })

    const handleAddCommand = () => {
        setAddCommandButtonDisabled(true)
        setTableLoading(true)
        const newData = [...moduleCommands];
        axios.post(addModuleCommandURL, {moduleKey: moduleInfo.key})
        .then((res) => {
            // Checking if the result was success or not
            try {  // If command was added it will be a JSON
                newData.push(JSON.parse(JSON.stringify(res.data)))
                setModuleCommands(newData);
                // notification.success({
                //     message: 'Success',
                //     description: 'Command added',
                //     placement: 'bottomRight'
                // })
                // I decided to use a message in the top middle because if you are deleting/adding multiple commands the notification gets in the way
                message.success({
                    content: 'Command added'
                })
            } catch (e) {  // If something went wrong
                console.log(e)
                notification.error({
                    message: 'Error',
                    description: res.data,
                    placement: 'bottomRight'
                })
            }
            setEditingKey('');
        }).catch((err) => {
            console.log(err)
        });
        setTableLoading(false)
        setAddCommandButtonDisabled(false)
    }

    const save = async (record) => { //Save the new edited information to the backend
        setTableLoading(true)
        try {
            const row = await form.validateFields();
            const newData = [...moduleCommands];
            const index = newData.findIndex((item) => record.key === item.key);
            if (index > -1) {
                const item = newData[index];
                newData.splice(index, 1, {
                    ...item,
                    ...row
                })
                // Sending info to the backend server
                let updatedCommandInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateModuleCommandURL, {command: updatedCommandInfo, moduleKey: moduleInfo.key})
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "Command updated") { // If command was updated successfully
                        setModuleCommands(newData);
                        // notification.success({
                        //     message: 'Success',
                        //     description: res.data,
                        //     placement: 'bottomRight'
                        // })
                        // I decided to use a message in the top middle because if you are deleting/adding multiple commands the notification gets in the way
                        message.success({
                            content: res.data
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                });
            } 
            else {
                // Sending info to the backend server
                let updatedCommandInfo = newData.find((item) => record.key === item.key) //The new row data
                axios.post(updateModuleCommandURL, {command: updatedCommandInfo, moduleKey: moduleInfo.key})
                .then((res) => {
                    // Checking if the result was success or not
                    if (res.data === "Command updated") { // If command was updated successfully
                        setModuleCommands(newData);
                        // notification.success({
                        //     message: 'Success',
                        //     description: res.data,
                        //     placement: 'bottomRight'
                        // })
                        // I decided to use a message in the top middle because if you are deleting/adding multiple commands the notification gets in the way
                        message.success({
                            content: res.data
                        })
                    } else { // If something went wrong
                        notification.error({
                            message: 'Error',
                            description: res.data,
                            placement: 'bottomRight'
                        })
                    }
                    setEditingKey('');
                }).catch((err) => {
                    console.log(err)
                });
            }
        } catch (errInfo) {
            console.log('Validate Failed: ', errInfo)
        }
        setTableLoading(false)
    }

    const deleteCommand = async (record) => { // Delete requested host
        setTableLoading(true)
        try{
            const newData = [...moduleCommands];
            const index = newData.findIndex((item) => record.key === item.key);
            
            if (index > -1) {
                newData.splice(index, 1)
            }
            axios.post(deleteModuleCommandURL, {command: record, moduleKey: moduleInfo.key})
            .then((res) => {
                // Checking if the result was success or not
                if (res.data === "Command deleted") { // If command was deleted successfully
                    // notification.success({
                    //     message: 'Success',
                    //     description: res.data,
                    //     placement: 'bottomRight'
                    // })
                    // I decided to use a message in the top middle because if you are deleting/adding multiple commands the notification gets in the way
                    message.success({
                        content: res.data
                    })
                    setModuleCommands(newData);
                } else { // If something went wrong
                    notification.error({
                        message: 'Error',
                        description: res.data,
                        placement: 'bottomRight'
                    })
                }
                setEditingKey('');
            })
            .catch((err) => {
                console.log(err);
            });
        } catch (errInfo) {
            console.log('Validate Failed: ', errInfo)
        }
        setTableLoading(false)
    }

    const isEditing = (record) => {  //Return true if user is editing
        if (record.key === editingKey)
            return true
    }

    const edit = (record) => {  //Change rows form contents when user is editing
        form.setFieldsValue({
            command: '',
            description: '',
            ...record,
        });
        setEditingKey(record.key)  //Set the table key that is being edited
    }

    const cancel = () => {  //Change the table key that is being edited to nothing when we are not editting
        setEditingKey('')
    }

    const LoadModuleInfo = () => {
        setTableLoading(true)
        axios.get(getModuleInfoURL+selectedModuleKey)
            .then((response) => {
                setModuleInfo(response.data)
                setModuleCommands(response.data.commands)
                if (response.data === "Could not find module matching that key") {
                    notification.error({
                        message: 'Error',
                        description: 'Could not fetch module info',
                        placement: 'bottomRight'
                    })
                }
            })
            .catch((err) => {
                console.log(err);
                notification.error({
                    message: 'Error',
                    description: 'Could not fetch module info',
                    placement: 'bottomRight'
                })
            });
        setTableLoading(false)
    }

    useEffect(() => {
        axios.get(getDatatypesURL)
            .then((res) => {
                setDatatypeInfo(<>
                    Add one of the datatype strings to your commands for quick and easy command execution<br /><br />
                    <b>{res.data.Host.name + ' Datatype: ' }</b> {res.data.Host.stringRepresentation}<br />
                    {res.data.Host.description}<br /> <br />
                    <b>{res.data.File.name + ' Datatype: ' }</b> {res.data.File.stringRepresentation}<br />
                    {res.data.File.description}<br /> <br />
                    <b>{res.data.String.name + ' Datatype: ' }</b> {res.data.String.stringRepresentation}<br />
                    {res.data.String.description}
                </>)
            })
            .catch((err) => {
                console.log(err)
            })
        // eslint-disable-next-line
    }, [])

    useEffect(() => {
        // If this is the first time the module page is loaded, or if we are closing the Modal, we don't want a request to the backend
        if (firstTimeLoadingPage === true || moduleOpen === false) {
            setFirstTimeLoadingPage(false)
        } else {
            LoadModuleInfo()
        }
        // eslint-disable-next-line
    }, [moduleOpen])

    return (
        <Modal
            title={<div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                <h2>{"Configure " + moduleInfo.name}</h2>
                <Avatar 
                    src={moduleIconURL+selectedModuleKey}
                    size={60}
                    style={{ marginLeft: '15px' }}
                />
            </div>}
            
            open={moduleOpen}
            okText="Save"
            onOk={() => setModuleOpen(false)}
            onCancel={() => setModuleOpen(false)}
            width={'70%'}
            footer={null}
        >
            <div style={{ display: 'flex', flexDirection: 'row', marginTop: '-24px', alignItems: 'center' }}>
                <InfoCircleOutlined />
                <p style={{ marginLeft: '10px' }}>
                    {moduleInfo.description}
                </p>
            </div>

            {
                addToCommandForNiceOutput === '' ?
                null : <p style={{ marginTop: '0px' }}>{addToCommandForNiceOutput}</p>
            }
            
            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
                <h3>{"Module Commands ("+moduleCommands.length+"):"}</h3>
                <Button 
                    onClick={() => handleAddCommand()}
                    style={{ marginLeft: '10px' }}
                    size='small'
                    disabled={addCommandButtonDisabled}
                >
                    <PlusOutlined />
                </Button>
            </div>
            <Form
                form={form}
                component={false}
            >
                <Table 
                    components={{
                        body: {
                            cell: EditableTableCell
                        }
                    }}
                    bordered
                    dataSource={moduleCommands}
                    columns={mergedColumns}
                    size='middle'
                    pagination={false}
                    loading={tableLoading}
                    style={{ marginBottom: '20px' }}
                />
            </Form>
        </Modal>
    )
}


export default ModulePage;
